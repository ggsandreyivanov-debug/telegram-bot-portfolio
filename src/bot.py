import os
import csv
import requests
from datetime import datetime, timezone
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    MessageHandler,
    CommandHandler,
    ContextTypes,
    filters,
)

# —Ç–æ–ª—å–∫–æ —Ç—ã
ALLOWED_USER = 235538565  # —Ç–≤–æ–π chat_id

# —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
TOKEN = os.getenv("BOT_TOKEN")
if TOKEN is None:
    raise RuntimeError("‚ö† BOT_TOKEN is not set in environment!")


async def is_allowed(update: Update) -> bool:
    """
    –†–∞–∑—Ä–µ—à–∞–µ–º –æ–±—â–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É.
    –û—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–≥–Ω–æ—Ä–∏–º –∏ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É.
    """
    chat_id = update.effective_chat.id
    if chat_id != ALLOWED_USER:
        print(f"‚õî Unauthorized access attempt from chat_id={chat_id}")
        return False
    return True


# ---------- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —á–∞—Å—Ç—å: –∫–æ—Ç–∏—Ä–æ–≤–∫–∏ ----------

def fetch_last_price_from_stooq(ticker: str):
    """
    –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Ü–µ–Ω—É —Å stooq.
    ticker –≤–∏–¥–∞ 'vwce.de', '^spx.us', 'xauusd.us', –∏ —Ç.–¥.
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º float –ª–∏–±–æ None.
    """
    url = f"https://stooq.com/q/l/?s={ticker}&f=sd2t2ohlcv&h&e=csv"
    try:
        resp = requests.get(url, timeout=5)
        resp.raise_for_status()
    except Exception as e:
        print(f"[price] request failed for {ticker}: {e}")
        return None

    # stooq –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç CSV –≤–∏–¥–∞:
    # Symbol,Date,Time,Open,High,Low,Close,Volume
    # ^SPX.US,2025-10-28,21:59:00,5000,5050,4980,5022,123456
    try:
        lines = resp.text.strip().splitlines()
        reader = csv.DictReader(lines)
        row = next(reader, None)
        if not row:
            print(f"[price] empty CSV for {ticker}")
            return None

        close_str = row.get("Close")
        if close_str is None or close_str == "N/A":
            print(f"[price] no Close for {ticker}, row={row}")
            return None

        return float(close_str)
    except Exception as e:
        print(f"[price] parse failed for {ticker}: {e}")
        return None


def get_price_snapshot():
    """
    –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —à—Ç—É–∫–∞–º:
    - S&P 500
    - –∑–æ–ª–æ—Ç–æ
    - VWCE (–∏–ª–∏ –±–ª–∏–∑–∫–∏–π –ø—Ä–æ–∫—Å–∏, –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥—ë–º –Ω–∞–ø—Ä—è–º—É—é)
    –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—Å—Ç.
    """

    # S&P 500 (–∏–Ω–¥–µ–∫—Å —à–∏—Ä–æ–∫–æ–≥–æ —Ä—ã–Ω–∫–∞ –°–®–ê)
    spx_price = fetch_last_price_from_stooq("^spx.us")

    # –ó–æ–ª–æ—Ç–æ (XAUUSD, —É–Ω—Ü–∏—è –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö)
    gold_price = fetch_last_price_from_stooq("xauusd.us")

    # VWCE ‚Äî —ç—Ç–æ Vanguard FTSE All-World Accumulating (EUR, Xetra)
    # –ü–æ–ø—Ä–æ–±—É–µ–º —Å–Ω–∞—á–∞–ª–∞ 'vwce.de'
    vwce_price = fetch_last_price_from_stooq("vwce.de")
    # –µ—Å–ª–∏ None, –ø–æ–ø—Ä–æ–±—É–µ–º 'vwrl.us' (–æ—á–µ–Ω—å –±–ª–∏–∑–∫–∏–π –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å–Ω—ã–π ETF –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö)
    if vwce_price is None:
        vwce_price = fetch_last_price_from_stooq("vwrl.us")

    lines = []
    lines.append("üíπ –¶–µ–Ω—ã –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:")

    if spx_price is not None:
        lines.append(f"‚Ä¢ S&P 500: ~{spx_price}")
    else:
        lines.append("‚Ä¢ S&P 500: –Ω–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å")

    if gold_price is not None:
        lines.append(f"‚Ä¢ Gold (XAU/USD): ~{gold_price} $/oz")
    else:
        lines.append("‚Ä¢ Gold: –Ω–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å")

    if vwce_price is not None:
        lines.append(f"‚Ä¢ VWCE (–≥–ª–æ–±–∞–ª–∫–∞): ~{vwce_price}")
    else:
        lines.append("‚Ä¢ VWCE: –Ω–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å (–±–∏—Ä–∂–∞ –Ω–µ –¥–∞–ª–∞ —Ü–µ–Ω—É)")

    return "\n".join(lines)


def build_risk_comment() -> str:
    """
    –†—É—á–Ω–∞—è —Å–µ–∫—Ü–∏—è "—á—Ç–æ –º–æ–∂–µ—Ç —à–∞—Ç–∞—Ç—å —Ä—ã–Ω–æ–∫".
    –ü–æ—Ç–æ–º –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å (–∫–∞–ª–µ–Ω–¥–∞—Ä—å –º–∞–∫—Ä–æ–¥–∞—Ç).
    """
    upcoming_events = [
        "üìÖ –§–†–° (—Å—Ç–∞–≤–∫–∞ –°–®–ê) ‚Äî –≤–ª–∏—è–µ—Ç –Ω–∞ –∞–∫—Ü–∏–∏ –°–®–ê (S&P 500, VWCE)",
        "üìÖ CPI –°–®–ê (–∏–Ω—Ñ–ª—è—Ü–∏—è) ‚Äî –µ—Å–ª–∏ –∏–Ω—Ñ–ª—è—Ü–∏—è –≤—ã—Å–æ–∫–∞—è, —Ä—ã–Ω–æ–∫ –º–æ–∂–µ—Ç –ø—Ä–æ—Å–µ—Å—Ç—å, –∑–æ–ª–æ—Ç–æ —Ä–∞—Å—Ç—ë—Ç",
        "üìÖ –°–®–ê vs –ö–∏—Ç–∞–π ‚Äî –≤–ª–∏—è–µ—Ç –Ω–∞ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å–µ–∫—Ç–æ—Ä",
    ]

    out = "–†—ã–Ω–æ—á–Ω—ã–µ —Ä–∏—Å–∫–∏ –±–ª–∏–∂–∞–π—à–µ–≥–æ –ø–ª–∞–Ω–∞:\n"
    for e in upcoming_events:
        out += f"‚Ä¢ {e}\n"
    return out


# ---------- –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ ----------

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /start - –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
    """
    if not await is_allowed(update):
        return

    await update.message.reply_text(
        "‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /status ‚Äî —Å–≤–æ–¥–∫–∞ –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é –∏ —Ä–∏—Å–∫–∞–º\n"
        "‚Ä¢ /pingprices ‚Äî —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã (S&P 500, –∑–æ–ª–æ—Ç–æ, VWCE)\n"
        "‚Ä¢ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç ‚Äî –ø—Ä–∏—à–ª—é —Ç–≤–æ–π chat_id\n"
        "–¢–æ–ª—å–∫–æ —Ç—ã –º–æ–∂–µ—à—å —ç—Ç–æ –≤—ã–∑–≤–∞—Ç—å üîí"
    )


async def status_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /status ‚Äî —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á—ë—Ç,
    —Å –ø–æ—Ä—Ç—Ñ–µ–ª–µ–º –∏ —Ä–∏—Å–∫–∞–º–∏, + –ø–µ—á–∞—Ç—å –≤—Ä–µ–º–µ–Ω–∏.
    """
    if not await is_allowed(update):
        return

    now_utc = datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M UTC")

    portfolio_lines = [
        "üì¶ –ü–æ—Ä—Ç—Ñ–µ–ª—å (–∏–¥–µ—è):",
        "‚Ä¢ S&P 500 (—á–µ—Ä–µ–∑ –∏–Ω–¥–µ–∫—Å–Ω—ã–π ETF –°–®–ê)",
        "‚Ä¢ VWCE (–≤–µ—Å—å –º–∏—Ä, –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è)",
        "‚Ä¢ Gold (—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞, –∑–∞—â–∏—Ç–∞ –æ—Ç —à—Ç–æ—Ä–º–∞)",
        "",
        "–õ–æ–≥–∏–∫–∞: –∞–∫—Ü–∏–∏ = —Ä–æ—Å—Ç, –∑–æ–ª–æ—Ç–æ = –∑–∞—â–∏—Ç–∞. –ë–∞–ª–∞–Ω—Å–∏—Ä—É–µ—à—å –º–æ–∑–≥, –∞ –Ω–µ —É–≥–∞–¥—ã–≤–∞–µ—à—å —Ä—ã–Ω–æ–∫.",
    ]

    msg = (
        f"‚è∞ {now_utc}\n"
        f"üë§ chat_id: {ALLOWED_USER}\n\n"
        + "\n".join(portfolio_lines)
        + "\n\n"
        + build_risk_comment()
        + "\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /pingprices ‚Äî –∂–∏–≤—ã–µ —Ü–µ–Ω—ã\n"
        "‚Ä¢ /status ‚Äî —ç—Ç–∞ —Å–≤–æ–¥–∫–∞\n"
        "‚Ä¢ /start ‚Äî –ø–æ–º–æ—â—å\n"
    )

    await update.message.reply_text(msg)


async def pingprices_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    /pingprices ‚Äî –∂–∏–≤—ã–µ —Ü–µ–Ω—ã —Å —Ä—ã–Ω–∫–∞ (—á–µ—Ä–µ–∑ stooq).
    """
    if not await is_allowed(update):
        return

    snapshot_text = get_price_snapshot()
    await update.message.reply_text(snapshot_text)


async def echo_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –õ—é–±–æ–π —Ç–µ–∫—Å—Ç –±–µ–∑ –∫–æ–º–∞–Ω–¥—ã ‚Üí –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–≤–æ–π chat_id.
    """
    if not await is_allowed(update):
        return

    chat_id = update.effective_chat.id
    print(f"CHAT_ID: {chat_id}")  # –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –≤ –ª–æ–≥–∞—Ö Render
    await update.message.reply_text(
        f"–¢–≤–æ–π chat_id: {chat_id}\n"
        "–Ø –æ—Ç–≤–µ—á–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–±–µ üîí"
    )


def main():
    app = ApplicationBuilder().token(TOKEN).build()

    # –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("status", status_cmd))
    app.add_handler(CommandHandler("pingprices", pingprices_cmd))

    # –ª—é–±–æ–π —Ç–µ–∫—Å—Ç (–±–µ–∑ –∫–æ–º–∞–Ω–¥—ã)
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo_chat_id))

    print("üöÄ Bot is running. Only allowed user can interact.")
    app.run_polling()


if __name__ == "__main__":
    main()
