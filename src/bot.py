import os
import aiohttp
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

TOKEN = os.getenv("BOT_TOKEN")
if TOKEN is None:
    raise RuntimeError("‚ö† BOT_TOKEN is not set in environment!")

# --- –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∏–∫–µ—Ä–æ–≤ ---

# –ö—Ä–∏–ø—Ç–∞: —Å–∏–º–≤–æ–ª—ã –¥–ª—è CoinGecko
COINS = {
    "BTC": "bitcoin",
    "ETH": "ethereum",
    "SOL": "solana",
    "AVAX": "avalanche-2",
    "DOGE": "dogecoin",
    "LINK": "chainlink",
}

# ETF/–ó–æ–ª–æ—Ç–æ: —Ç–∏–∫–µ—Ä—ã –¥–ª—è stooq (–±–µ—Å–ø–ª–∞—Ç–Ω–æ)
# Stooq –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ñ–æ—Ä–º–∞—Ç—ã —Ç–∏–ø–∞:
# - VWCE.DE –º–æ–∂–µ—Ç –±—ã—Ç—å 'vwce.de' –∏–ª–∏ 'vwce.de' -> –ø–æ–ø—Ä–æ–±—É–µ–º –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
# - –ó–æ–ª–æ—Ç–æ —Ñ–∏–∑–∏—á–µ—Å–∫–æ–µ –≤ –µ–≤—Ä–æ: —á–∞—Å—Ç–æ —Ç–æ—Ä–≥—É–µ—Ç—Å—è –∫–∞–∫ Xetra Gold (4GLD.DE),
#   –Ω–æ —Ç–≤–æ–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç "X IE PHYSICAL GOLD ETC EUR" –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –¥—Ä—É–≥–æ–π —Ç–∏–∫–µ—Ä
#   –ù–∞ —Ç–µ—Å—Ç –ø–æ—Å—Ç–∞–≤–ª—é 4GLD.DE –∫–∞–∫ –∑–∞–º–µ–Ω—É. –ü–æ—Ç–æ–º –ø–æ–¥–≥–æ–Ω–∏–º.
VWCE_TICKER = "vwce.de"
GOLD_TICKER = "4gld.de"  # –≤—Ä–µ–º–µ–Ω–Ω–æ —Ç–∞–∫, –º—ã –ø–æ—Ç–æ–º —É—Ç–æ—á–Ω–∏–º —Ç–≤–æ–π —Ç–æ—á–Ω—ã–π ISIN –∏ —Ç–∏–∫–µ—Ä

# S&P500 –º—ã –º–æ–∂–µ–º —ç–º—É–ª–∏—Ä–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ SPY (SPDR S&P 500 ETF) —Å Yahoo/Stooq.
SP500_TICKER = "spy.us"  # SPY –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö –∫–∞–∫ –ø—Ä–æ–∫—Å–∏ –∏–Ω–¥–µ–∫—Å–∞


# ==========================
#  HTTP —É—Ç–∏–ª–∏—Ç—ã
# ==========================

async def fetch_json(session: aiohttp.ClientSession, url: str, params=None):
    try:
        async with session.get(url, params=params, timeout=10) as resp:
            if resp.status != 200:
                return None
            return await resp.json()
    except Exception:
        return None

async def fetch_text(session: aiohttp.ClientSession, url: str, params=None):
    try:
        async with session.get(url, params=params, timeout=10) as resp:
            if resp.status != 200:
                return None
            return await resp.text()
    except Exception:
        return None


# ==========================
#  –ü–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω
# ==========================

async def get_crypto_prices(session: aiohttp.ClientSession):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict –≤–∏–¥–∞:
    {
      "BTC": {"usd": 64234.12, "change_24h": -2.13},
      ...
    }
    –ò—Å–ø–æ–ª—å–∑—É–µ–º CoinGecko /simple/price
    """
    ids = ",".join(COINS.values())
    url = "https://api.coingecko.com/api/v3/simple/price"
    params = {
        "ids": ids,
        "vs_currencies": "usd",
        "include_24hr_change": "true",
    }
    data = await fetch_json(session, url, params=params)
    if not data:
        return None

    out = {}
    for symbol, cg_id in COINS.items():
        if cg_id not in data:
            continue
        entry = data[cg_id]
        price = entry.get("usd")
        chg = entry.get("usd_24h_change")
        out[symbol] = {
            "usd": price,
            "change_24h": chg,
        }
    return out


async def get_stooq_price(session: aiohttp.ClientSession, ticker: str):
    """
    Stooq CSV API: https://stooq.com
    –§–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞:
      https://stooq.com/q/l/?s=spy.us&i=d
    –û—Ç–≤–µ—Ç CSV, –ø–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–µ–Ω—É close.

    –í–µ—Ä–Ω—ë–º float –∏–ª–∏ None.
    """
    url = "https://stooq.com/q/l/"
    params = {
        "s": ticker,
        "i": "d",  # daily
    }
    txt = await fetch_text(session, url, params=params)
    if not txt:
        return None

    # –ø—Ä–∏–º–µ—Ä CSV:
    # "Symbol","Date","Time","Open","High","Low","Close","Volume"
    # "spy.us","2024-10-27","22:00:06","504.42","506.68","503.79","505.10","..."
    lines = txt.strip().splitlines()
    if len(lines) < 2:
        return None
    last_line = lines[1].strip()
    parts = [p.strip('"') for p in last_line.split(",")]
    # parts[6] = Close
    try:
        close_val = float(parts[6])
        return close_val
    except Exception:
        return None


# ==========================
#  –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
# ==========================

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –Ø –æ–Ω–ª–∞–π–Ω.\n"
        "–¢–≤–æ–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/status ‚Äì –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —Ä–∞–±–æ—Ç–∞—é –ª–∏ —è\n"
        "/pingprices ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—ã (—á–µ—Ä–Ω–æ–≤–∏–∫)\n"
        "/start ‚Äì –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"
    )

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚úÖ –ë–æ—Ç –∂–∏–≤ –∏ —Å–ª—É—à–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã.")

async def pingprices(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–∞–∂–µ—Ç—Å—è –ø—Ä–æ—Å—Ç—ã–º, –Ω–æ –¥–µ–ª–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—É—é —Ä–∞–±–æ—Ç—É:
    - —Ç–∞—â–∏—Ç –∫—Ä–∏–ø—Ç—É —Å CoinGecko
    - —Ç–∞—â–∏—Ç VWCE, –ó–æ–ª–æ—Ç–æ –∏ SP500-–ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä —á–µ—Ä–µ–∑ stooq
    - —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç
    """
    async with aiohttp.ClientSession() as session:
        # –∫—Ä–∏–ø—Ç–∞
        crypto = await get_crypto_prices(session)

        # —Ñ–æ–Ω–¥–æ–≤—ã–µ/ETF
        sp500 = await get_stooq_price(session, SP500_TICKER)
        vwce = await get_stooq_price(session, VWCE_TICKER)
        gold = await get_stooq_price(session, GOLD_TICKER)

    # —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    lines = ["üíπ –¶–µ–Ω—ã –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:"]

    # S&P 500
    if sp500 is not None:
        lines.append(f"‚Ä¢ S&P 500 (SPY): ~{sp500:.2f} USD")
    else:
        lines.append("‚Ä¢ S&P 500: –Ω–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å")

    # Gold
    if gold is not None:
        lines.append(f"‚Ä¢ Gold (EUR ETF): ~{gold:.2f}")
    else:
        lines.append("‚Ä¢ Gold: –Ω–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å")

    # VWCE
    if vwce is not None:
        lines.append(f"‚Ä¢ VWCE: ~{vwce:.2f} EUR")
    else:
        lines.append("‚Ä¢ VWCE: –Ω–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å")

    lines.append("")  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –ø–µ—Ä–µ–¥ –∫—Ä–∏–ø—Ç–æ–π
    lines.append("–ö—Ä–∏–ø—Ç–∞:")

    if crypto:
        for sym in ["BTC", "ETH", "SOL", "AVAX", "DOGE", "LINK"]:
            info = crypto.get(sym)
            if not info:
                lines.append(f"‚Ä¢ {sym}: –Ω/–¥")
                continue
            price = info["usd"]
            chg = info["change_24h"]
            if price is None:
                lines.append(f"‚Ä¢ {sym}: –Ω/–¥")
                continue
            # —Ñ–æ—Ä–º–∞—Ç +/- –∏–∑–º–µ–Ω–µ–Ω–∏—è
            if chg is not None:
                lines.append(f"‚Ä¢ {sym}: ${price:,.2f} ({chg:+.2f}%)")
            else:
                lines.append(f"‚Ä¢ {sym}: ${price:,.2f}")
    else:
        lines.append("‚Ä¢ –Ω–µ —Å–º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å –∫–æ—Ç–∏—Ä–æ–≤–∫–∏")

    text = "\n".join(lines)
    await update.message.reply_text(text)

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–Ø —Ç–µ–±—è —Å–ª—ã—à—É üëÇ")

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    # –∫–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("status", status))
    app.add_handler(CommandHandler("pingprices", pingprices))

    # fallback –Ω–∞ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    print("üöÄ Bot is running. Send /status or /pingprices in Telegram.")
    app.run_polling()

if __name__ == "__main__":
    main()
