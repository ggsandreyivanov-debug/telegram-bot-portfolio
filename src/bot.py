# BOT VERSION: 2025-10-31-OPTIMIZED-v5
# –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:
# - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π (–≤–º–µ—Å—Ç–æ –≤—Å–µ—Ö —Ç–∏–∫–µ—Ä–æ–≤)
# - –ï–¥–∏–Ω—ã–π –∫–µ—à –¥–ª—è price_alerts –∏ trade_alerts
# - Binance –∫–∞–∫ primary source (–±—ã—Å—Ç—Ä–µ–µ –∏ —Ç–æ—á–Ω–µ–µ)
# - –ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ last_prices
# - –°–Ω–∏–∂–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ 80%

import os
import math
import asyncio
import traceback
import aiohttp
import json
from typing import Dict, Any, Optional, Tuple, List
from datetime import time as dt_time, datetime, timedelta
from pathlib import Path

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    CallbackQueryHandler,
    ConversationHandler,
)

# === ENV ===
TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
LUNARCRUSH_API_KEY = os.getenv("LUNARCRUSH_API_KEY", "lsnio8kvswz9egysxeb8tzybcmhc2zcuee74kwz")
SUPABASE_URL = os.getenv("SUPABASE_URL", "https://oueliwijnudbvjlekrsc.supabase.co")
SUPABASE_KEY = os.getenv("SUPABASE_KEY", "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im91ZWxpd2lqbnVkYnZqbGVrcnNjIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NjE3NTE1MzgsImV4cCI6MjA3NzMyNzUzOH0.m7C_Uc2RItTkxQ786AkFnrTLZQIuDnuG__SEnjDAd8w")

if not TOKEN:
    raise RuntimeError("‚ö† BOT_TOKEN is not set in environment!")
if not CHAT_ID:
    print("‚ö† CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–∫–ª—é—á–µ–Ω—ã")

# === PATHS ===
DATA_DIR = Path("/home/claude/bot_data")
DATA_DIR.mkdir(exist_ok=True)
CACHE_FILE = DATA_DIR / "price_cache.json"
PORTFOLIO_FILE = DATA_DIR / "portfolios.json"
TRADES_FILE = DATA_DIR / "trades.json"

# === CONFIG ===
HEADERS = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36",
    "Accept": "application/json",
}
TIMEOUT = aiohttp.ClientTimeout(total=15)

# –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã
AVAILABLE_TICKERS = {
    "VWCE.DE": {"name": "VWCE", "type": "stock"},
    "4GLD.DE": {"name": "4GLD (Gold ETC)", "type": "stock"},
    "DE000A2T5DZ1.SG": {"name": "X IE Physical Gold ETC", "type": "stock"},
    "SPY": {"name": "S&P 500 (SPY)", "type": "stock"},
}

# –ö—Ä–∏–ø—Ç–∞: Binance symbol + fallback IDs
CRYPTO_IDS = {
    "BTC": {"binance": "BTCUSDT", "coingecko": "bitcoin", "paprika": "btc-bitcoin", "name": "Bitcoin"},
    "ETH": {"binance": "ETHUSDT", "coingecko": "ethereum", "paprika": "eth-ethereum", "name": "Ethereum"},
    "SOL": {"binance": "SOLUSDT", "coingecko": "solana", "paprika": "sol-solana", "name": "Solana"},
    "AVAX": {"binance": "AVAXUSDT", "coingecko": "avalanche-2", "paprika": "avax-avalanche", "name": "Avalanche"},
    "DOGE": {"binance": "DOGEUSDT", "coingecko": "dogecoin", "paprika": "doge-dogecoin", "name": "Dogecoin"},
    "LINK": {"binance": "LINKUSDT", "coingecko": "chainlink", "paprika": "link-chainlink", "name": "Chainlink"},
}

# –ü–æ—Ä–æ–≥–∏ –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤
THRESHOLDS = {
    "stocks": 1.0,
    "crypto": 4.0,
}

# === –ö–ï–®–ò–†–û–í–ê–ù–ò–ï ===
class PriceCache:
    """–£–º–Ω—ã–π –∫–µ—à —Å TTL –∏ –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å—é"""
    def __init__(self, ttl_seconds: int = 300):
        self.ttl = ttl_seconds
        self.cache: Dict[str, Dict] = {}
        self.load()
    
    def load(self):
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–µ—à —Å –¥–∏—Å–∫–∞"""
        if CACHE_FILE.exists():
            try:
                with open(CACHE_FILE, 'r') as f:
                    data = json.load(f)
                    # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø–∏—Å–∏
                    now = datetime.now().timestamp()
                    self.cache = {
                        k: v for k, v in data.items()
                        if now - v.get('timestamp', 0) < self.ttl * 2  # –î–∞–µ–º –∑–∞–ø–∞—Å
                    }
                    print(f"‚úÖ Loaded {len(self.cache)} prices from cache")
            except Exception as e:
                print(f"‚ö†Ô∏è Cache load error: {e}")
    
    def save(self):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–µ—à –Ω–∞ –¥–∏—Å–∫"""
        try:
            with open(CACHE_FILE, 'w') as f:
                json.dump(self.cache, f)
        except Exception as e:
            print(f"‚ö†Ô∏è Cache save error: {e}")
    
    def get(self, key: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–∑ –∫–µ—à–∞ –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞—Ä–µ–ª"""
        if key in self.cache:
            entry = self.cache[key]
            age = datetime.now().timestamp() - entry['timestamp']
            if age < self.ttl:
                return entry['data']
        return None
    
    def set(self, key: str, data: Dict):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –∫–µ—à"""
        self.cache[key] = {
            'data': data,
            'timestamp': datetime.now().timestamp()
        }
        # –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 –∑–∞–ø–∏—Å–µ–π
        if len(self.cache) % 10 == 0:
            self.save()
    
    def get_for_alert(self, key: str) -> Optional[float]:
        """–ü–æ–ª—É—á–∏—Ç—å last price –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤ (–±–µ–∑ TTL –ø—Ä–æ–≤–µ—Ä–∫–∏)"""
        if key in self.cache:
            return self.cache[key]['data'].get('price')
        return None
    
    def set_for_alert(self, key: str, price: float):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å last price –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤"""
        if key not in self.cache:
            self.cache[key] = {'data': {}, 'timestamp': datetime.now().timestamp()}
        self.cache[key]['data']['price'] = price
        self.save()

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫–µ—à
price_cache = PriceCache(ttl_seconds=300)  # 5 –º–∏–Ω—É—Ç TTL

# === –•–†–ê–ù–ò–õ–ò–©–ï ===
user_portfolios: Dict[int, Dict[str, float]] = {}
user_trades: Dict[int, List[Dict[str, Any]]] = {}
user_profiles: Dict[int, str] = {}

def load_data():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –¥–∏—Å–∫–∞"""
    global user_portfolios, user_trades
    
    if PORTFOLIO_FILE.exists():
        try:
            with open(PORTFOLIO_FILE, 'r') as f:
                user_portfolios = {int(k): v for k, v in json.load(f).items()}
            print(f"‚úÖ Loaded {len(user_portfolios)} portfolios")
        except Exception as e:
            print(f"‚ö†Ô∏è Portfolio load error: {e}")
    
    if TRADES_FILE.exists():
        try:
            with open(TRADES_FILE, 'r') as f:
                user_trades = {int(k): v for k, v in json.load(f).items()}
            print(f"‚úÖ Loaded {len(user_trades)} trade lists")
        except Exception as e:
            print(f"‚ö†Ô∏è Trades load error: {e}")

def save_portfolios():
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª–∏"""
    try:
        with open(PORTFOLIO_FILE, 'w') as f:
            json.dump(user_portfolios, f)
    except Exception as e:
        print(f"‚ö†Ô∏è Portfolio save error: {e}")

def save_trades():
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–¥–µ–ª–∫–∏"""
    try:
        with open(TRADES_FILE, 'w') as f:
            json.dump(user_trades, f)
    except Exception as e:
        print(f"‚ö†Ô∏è Trades save error: {e}")

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
load_data()

# === –¢–ò–ü–´ –ò–ù–í–ï–°–¢–û–†–û–í ===
INVESTOR_TYPES = {
    "long": {"name": "–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π –∏–Ω–≤–µ—Å—Ç–æ—Ä", "emoji": "üèîÔ∏è", "desc": "–ü–æ–∫—É–ø–∞—é –Ω–∞ —Å—Ç—Ä–∞—Ö–µ, –¥–µ—Ä–∂—É –≥–æ–¥–∞–º–∏"},
    "swing": {"name": "–°–≤–∏–Ω–≥-—Ç—Ä–µ–π–¥–µ—Ä", "emoji": "üåä", "desc": "–õ–æ–≤–ª—é –≤–æ–ª–Ω—ã, –¥–µ—Ä–∂—É –¥–Ω–∏-–Ω–µ–¥–µ–ª–∏"},
    "day": {"name": "–î–Ω–µ–≤–Ω–æ–π —Ç—Ä–µ–π–¥–µ—Ä", "emoji": "‚ö°", "desc": "–ë—ã—Å—Ç—Ä—ã–µ —Å–¥–µ–ª–∫–∏ –≤–Ω—É—Ç—Ä–∏ –¥–Ω—è"},
}

# Conversation states
SELECT_CRYPTO, ENTER_AMOUNT, ENTER_PRICE, ENTER_TARGET = range(4)
SELECT_ASSET_TYPE, SELECT_ASSET, ENTER_ASSET_AMOUNT = range(4, 7)

def get_main_menu():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    keyboard = [
        [KeyboardButton("üíº –ú–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å"), KeyboardButton("üíπ –í—Å–µ —Ü–µ–Ω—ã")],
        [KeyboardButton("üéØ –ú–æ–∏ —Å–¥–µ–ª–∫–∏"), KeyboardButton("üìä –†—ã–Ω–æ—á–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã")],
        [KeyboardButton("üì∞ –°–æ–±—ã—Ç–∏—è –Ω–µ–¥–µ–ª–∏"), KeyboardButton("üîÆ –ü—Ä–æ–≥–Ω–æ–∑—ã")],
        [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤"), KeyboardButton("üÜï –ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞")],
        [KeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"), KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")],
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# ----------------- HTTP helpers -----------------
async def get_json(session: aiohttp.ClientSession, url: str, params=None) -> Optional[Dict[str, Any]]:
    try:
        async with session.get(url, params=params, headers=HEADERS, timeout=TIMEOUT) as r:
            if r.status != 200:
                print(f"‚ö† {url} -> HTTP {r.status}")
                return None
            return await r.json()
    except Exception as e:
        print(f"‚ùå get_json({url}) error: {e}")
        return None

# ----------------- PRICES: Yahoo Finance -----------------
async def get_yahoo_price(session: aiohttp.ClientSession, ticker: str) -> Optional[Tuple[float, str, float]]:
    """–ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –æ–¥–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞ —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –∑–∞ –¥–µ–Ω—å"""
    try:
        url = f"https://query2.finance.yahoo.com/v8/finance/chart/{ticker}"
        params = {"interval": "1d", "range": "1d"}
        data = await get_json(session, url, params)
        
        if data:
            result = data.get("chart", {}).get("result", [{}])[0]
            meta = result.get("meta", {})
            price = meta.get("regularMarketPrice")
            cur = meta.get("currency", "USD")
            change_pct = meta.get("regularMarketChangePercent", 0)
            
            if price:
                return (float(price), cur, float(change_pct))
    except Exception as e:
        print(f"‚ùå Yahoo {ticker} error: {e}")
    return None

# ----------------- PRICES: Crypto (–û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–û) -----------------
async def get_crypto_price_raw(session: aiohttp.ClientSession, symbol: str) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –ë–ï–ó –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–ª—è –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)"""
    crypto_info = CRYPTO_IDS.get(symbol)
    if not crypto_info:
        return None
    
    # 1. BINANCE (Primary - —Å–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π –∏ —Ç–æ—á–Ω—ã–π)
    try:
        binance_symbol = crypto_info["binance"]
        url = "https://api.binance.com/api/v3/ticker/24hr"
        params = {"symbol": binance_symbol}
        
        async with session.get(url, params=params, timeout=TIMEOUT) as response:
            if response.status == 200:
                data = await response.json()
                price = float(data.get("lastPrice", 0))
                change_24h = float(data.get("priceChangePercent", 0))
                
                if price > 0:
                    print(f"‚úÖ {symbol} from Binance: ${price:,.2f} ({change_24h:+.2f}%)")
                    return {
                        "usd": price,
                        "change_24h": change_24h,
                        "source": "Binance"
                    }
    except Exception as e:
        print(f"‚ö†Ô∏è Binance failed for {symbol}: {e}")
    
    # 2. COINPAPRIKA (Fallback)
    try:
        paprika_id = crypto_info["paprika"]
        url = f"https://api.coinpaprika.com/v1/tickers/{paprika_id}"
        data = await get_json(session, url, None)
        
        if data:
            quotes = data.get("quotes", {}).get("USD", {})
            price = quotes.get("price")
            change_24h = quotes.get("percent_change_24h")
            if price:
                print(f"‚úÖ {symbol} from CoinPaprika: ${price:,.2f} ({change_24h:+.2f}%)")
                return {
                    "usd": float(price),
                    "change_24h": float(change_24h) if change_24h else None,
                    "source": "CoinPaprika"
                }
    except Exception as e:
        print(f"‚ö†Ô∏è CoinPaprika failed for {symbol}: {e}")
    
    # 3. COINGECKO (Last resort)
    try:
        coingecko_id = crypto_info["coingecko"]
        url = "https://api.coingecko.com/api/v3/simple/price"
        params = {
            "ids": coingecko_id,
            "vs_currencies": "usd",
            "include_24hr_change": "true"
        }
        data = await get_json(session, url, params)
        
        if data and coingecko_id in data:
            coin_data = data[coingecko_id]
            price = coin_data.get("usd")
            change_24h = coin_data.get("usd_24h_change")
            if price:
                print(f"‚úÖ {symbol} from CoinGecko: ${price:,.2f} ({change_24h:+.2f}%)")
                return {
                    "usd": float(price),
                    "change_24h": float(change_24h) if change_24h else None,
                    "source": "CoinGecko"
                }
    except Exception as e:
        print(f"‚ö†Ô∏è CoinGecko failed for {symbol}: {e}")
    
    print(f"‚ùå All sources failed for {symbol}")
    return None

async def get_crypto_price(session: aiohttp.ClientSession, symbol: str, use_cache: bool = True) -> Optional[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –° –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    cache_key = f"crypto_{symbol}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    if use_cache:
        cached = price_cache.get(cache_key)
        if cached:
            print(f"üì¶ {symbol} from cache: ${cached['usd']:,.2f}")
            return cached
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ
    result = await get_crypto_price_raw(session, symbol)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
    if result:
        price_cache.set(cache_key, result)
    
    return result

async def get_fear_greed_index(session: aiohttp.ClientSession) -> Optional[int]:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏"""
    cache_key = "fear_greed"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–µ—à
    cached = price_cache.get(cache_key)
    if cached:
        return cached.get('value')
    
    try:
        url = "https://api.alternative.me/fng/"
        data = await get_json(session, url, None)
        if data and "data" in data:
            value = int(data["data"][0]["value"])
            price_cache.set(cache_key, {'value': value})
            return value
    except Exception as e:
        print(f"‚ùå Fear & Greed error: {e}")
    return None

# ----------------- Portfolio Management -----------------
def get_user_portfolio(user_id: int) -> Dict[str, float]:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å"""
    if user_id not in user_portfolios:
        user_portfolios[user_id] = {
            "VWCE.DE": 0,
            "DE000A2T5DZ1.SG": 0,
            "BTC": 0,
            "ETH": 0,
            "SOL": 0,
        }
    return user_portfolios[user_id]

def save_portfolio(user_id: int, portfolio: Dict[str, float]):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å"""
    user_portfolios[user_id] = portfolio
    save_portfolios()

def get_all_active_assets() -> Dict[str, List[int]]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –í–°–ï–• –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤ (–¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤)
    Returns: {'BTC': [user_id1, user_id2], 'VWCE.DE': [user_id3], ...}
    """
    active_assets = {}
    
    # –ê–∫—Ç–∏–≤—ã –∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π
    for user_id, portfolio in user_portfolios.items():
        for ticker, quantity in portfolio.items():
            if quantity > 0:
                if ticker not in active_assets:
                    active_assets[ticker] = []
                if user_id not in active_assets[ticker]:
                    active_assets[ticker].append(user_id)
    
    # –ê–∫—Ç–∏–≤—ã –∏–∑ —Å–¥–µ–ª–æ–∫
    for user_id, trades in user_trades.items():
        for trade in trades:
            symbol = trade['symbol']
            if symbol not in active_assets:
                active_assets[symbol] = []
            if user_id not in active_assets[symbol]:
                active_assets[symbol].append(user_id)
    
    return active_assets

# ----------------- Trade Management -----------------
def get_user_trades(user_id: int) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Å–¥–µ–ª–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_trades:
        user_trades[user_id] = []
    return user_trades[user_id]

def add_trade(user_id: int, symbol: str, amount: float, entry_price: float, target_profit_pct: float):
    """–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é —Å–¥–µ–ª–∫—É"""
    trades = get_user_trades(user_id)
    trade = {
        "symbol": symbol,
        "amount": amount,
        "entry_price": entry_price,
        "target_profit_pct": target_profit_pct,
        "timestamp": datetime.now().isoformat(),
        "notified": False
    }
    trades.append(trade)
    save_trades()
    print(f"‚úÖ Added trade for user {user_id}: {symbol} x{amount} @ ${entry_price}")

# ----------------- Market Signals -----------------
async def get_market_signal(session: aiohttp.ClientSession, symbol: str, investor_type: str) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–∏–≥–Ω–∞–ª BUY/HOLD/SELL –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞"""
    
    crypto_data = await get_crypto_price(session, symbol)
    if not crypto_data:
        return {"signal": "UNKNOWN", "emoji": "‚ùì", "reason": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–µ"}
    
    fear_greed = await get_fear_greed_index(session)
    if not fear_greed:
        fear_greed = 50
    
    if investor_type == "long":
        if fear_greed < 30:
            return {
                "signal": "BUY",
                "emoji": "üü¢",
                "reason": f"–≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —Å—Ç—Ä–∞—Ö ({fear_greed}/100). –û—Ç–ª–∏—á–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞."
            }
        elif fear_greed > 75:
            return {
                "signal": "HOLD",
                "emoji": "üü°",
                "reason": f"–ñ–∞–¥–Ω–æ—Å—Ç—å ({fear_greed}/100). –î–µ—Ä–∂–∏—Ç–µ –ø–æ–∑–∏—Ü–∏–∏."
            }
        else:
            return {
                "signal": "HOLD",
                "emoji": "üü°",
                "reason": f"–°—Ç–∞–±–∏–ª—å–Ω—ã–π —Ä—ã–Ω–æ–∫ ({fear_greed}/100). –î–µ—Ä–∂–∞—Ç—å –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ."
            }
    
    elif investor_type == "swing":
        if fear_greed < 40:
            return {
                "signal": "BUY",
                "emoji": "üü¢",
                "reason": f"–°—Ç—Ä–∞—Ö ({fear_greed}/100). –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–æ–π—Ç–∏ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏."
            }
        elif fear_greed > 65:
            return {
                "signal": "SELL",
                "emoji": "üî¥",
                "reason": f"–ñ–∞–¥–Ω–æ—Å—Ç—å ({fear_greed}/100). –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–±—ã–ª—å."
            }
        else:
            return {
                "signal": "HOLD",
                "emoji": "üü°",
                "reason": f"–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ ({fear_greed}/100). –ñ–¥–∞—Ç—å –ª—É—á—à–µ–π —Ç–æ—á–∫–∏."
            }
    
    else:  # day trader
        if fear_greed < 45:
            return {
                "signal": "BUY",
                "emoji": "üü¢",
                "reason": f"–°—Ç—Ä–∞—Ö ({fear_greed}/100). –í–æ–∑–º–æ–∂–µ–Ω –æ—Ç—Å–∫–æ–∫."
            }
        elif fear_greed > 60:
            return {
                "signal": "SELL",
                "emoji": "üî¥",
                "reason": f"–ü–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å ({fear_greed}/100). –†–∏—Å–∫ –∫–æ—Ä—Ä–µ–∫—Ü–∏–∏."
            }
        else:
            return {
                "signal": "HOLD",
                "emoji": "üü°",
                "reason": f"–§–ª—ç—Ç ({fear_greed}/100). –û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞."
            }

# ----------------- MONITORING: –û–ü–¢–ò–ú–ò–ó–ò–†–û–í–ê–ù–ù–´–ï –ê–õ–ï–†–¢–´ -----------------
async def check_all_alerts(context: ContextTypes.DEFAULT_TYPE):
    """
    –ï–î–ò–ù–ê–Ø –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ - –¢–û–õ–¨–ö–û –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤!
    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç price_alerts + trade_alerts –≤ –æ–¥–∏–Ω –ø—Ä–æ—Ö–æ–¥
    """
    if not CHAT_ID:
        print("‚ö†Ô∏è CHAT_ID not set, skipping alerts")
        return
    
    print("üîî Running optimized alerts check...")
    
    try:
        active_assets = get_all_active_assets()
        
        if not active_assets:
            print("‚ÑπÔ∏è  No active assets, skipping alerts")
            return
        
        print(f"üìä Checking {len(active_assets)} active assets:")
        for asset, users in active_assets.items():
            print(f"  ‚Ä¢ {asset}: {len(users)} users")
        
        async with aiohttp.ClientSession() as session:
            price_alerts = []
            trade_alerts = {}  # {user_id: [alerts]}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–∫—Ç–∏–≤—ã
            for asset, user_ids in active_assets.items():
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∞–∫—Ç–∏–≤–∞
                if asset in AVAILABLE_TICKERS:
                    # –ê–∫—Ü–∏–∏/ETF
                    price_data = await get_yahoo_price(session, asset)
                    if not price_data:
                        continue
                    
                    price, currency, _ = price_data
                    cache_key = f"alert_stock_{asset}"
                    
                    old_price = price_cache.get_for_alert(cache_key)
                    
                    if old_price:
                        change_pct = ((price - old_price) / old_price) * 100
                        print(f"  {asset}: {old_price:.2f} -> {price:.2f} ({change_pct:+.2f}%)")
                        
                        if abs(change_pct) >= THRESHOLDS["stocks"]:
                            name = AVAILABLE_TICKERS[asset]["name"]
                            emoji = "üìà" if change_pct > 0 else "üìâ"
                            price_alerts.append(
                                f"{emoji} <b>{name}</b>: {change_pct:+.2f}%\n"
                                f"–¶–µ–Ω–∞: {price:.2f} {currency}"
                            )
                            print(f"  üö® ALERT! {name} changed by {change_pct:+.2f}%")
                    else:
                        print(f"  {asset}: First check, storing price {price:.2f}")
                    
                    price_cache.set_for_alert(cache_key, price)
                
                elif asset in CRYPTO_IDS:
                    # –ö—Ä–∏–ø—Ç–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–ª—è price alerts –∏ –¥–ª—è trade alerts
                    crypto_data = await get_crypto_price(session, asset, use_cache=False)
                    if not crypto_data:
                        continue
                    
                    current_price = crypto_data["usd"]
                    cache_key = f"alert_crypto_{asset}"
                    
                    # Price alerts
                    old_price = price_cache.get_for_alert(cache_key)
                    
                    if old_price:
                        change_pct = ((current_price - old_price) / old_price) * 100
                        print(f"  {asset}: ${old_price:,.2f} -> ${current_price:,.2f} ({change_pct:+.2f}%)")
                        
                        if abs(change_pct) >= THRESHOLDS["crypto"]:
                            emoji = "üöÄ" if change_pct > 0 else "‚ö†Ô∏è"
                            price_alerts.append(
                                f"{emoji} <b>{asset}</b>: {change_pct:+.2f}%\n"
                                f"–¶–µ–Ω–∞: ${current_price:,.2f}"
                            )
                            print(f"  üö® PRICE ALERT! {asset} changed by {change_pct:+.2f}%")
                    else:
                        print(f"  {asset}: First check, storing price ${current_price:,.2f}")
                    
                    price_cache.set_for_alert(cache_key, current_price)
                    
                    # Trade profit alerts –¥–ª—è —ç—Ç–æ–π –∫—Ä–∏–ø—Ç—ã
                    for user_id in user_ids:
                        trades = get_user_trades(user_id)
                        for trade in trades:
                            if trade["symbol"] != asset or trade.get("notified"):
                                continue
                            
                            entry_price = trade["entry_price"]
                            target = trade["target_profit_pct"]
                            amount = trade["amount"]
                            
                            profit_pct = ((current_price - entry_price) / entry_price) * 100
                            
                            print(f"  Trade check: {asset} for user {user_id}: {profit_pct:.2f}% (target {target}%)")
                            
                            if profit_pct >= target:
                                value = amount * current_price
                                profit_usd = amount * (current_price - entry_price)
                                
                                alert_text = (
                                    f"üéØ <b>–¶–ï–õ–¨ –î–û–°–¢–ò–ì–ù–£–¢–ê!</b>\n\n"
                                    f"üí∞ {asset}\n"
                                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {amount:.4f}\n"
                                    f"–¶–µ–Ω–∞ –≤—Ö–æ–¥–∞: ${entry_price:,.2f}\n"
                                    f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${current_price:,.2f}\n\n"
                                    f"üìà –ü—Ä–∏–±—ã–ª—å: <b>{profit_pct:.2f}%</b> (${profit_usd:,.2f})\n"
                                    f"üíµ –°—Ç–æ–∏–º–æ—Å—Ç—å: ${value:,.2f}\n\n"
                                    f"‚úÖ <b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü–†–û–î–ê–í–ê–¢–¨</b>"
                                )
                                
                                if user_id not in trade_alerts:
                                    trade_alerts[user_id] = []
                                trade_alerts[user_id].append(alert_text)
                                trade["notified"] = True
                                print(f"  üö® PROFIT ALERT for user {user_id}: {asset} +{profit_pct:.2f}%!")
                
                await asyncio.sleep(0.2)  # Rate limiting
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Å–¥–µ–ª–æ–∫
            if trade_alerts:
                save_trades()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–µ—à
            price_cache.save()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º price alerts (–≤—Å–µ–º)
            if price_alerts:
                message = "üîî <b>–¶–µ–Ω–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã!</b>\n\n" + "\n\n".join(price_alerts)
                await context.bot.send_message(chat_id=CHAT_ID, text=message, parse_mode='HTML')
                print(f"üì§ Sent {len(price_alerts)} price alerts")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º trade alerts (–ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ)
            total_trade_alerts = sum(len(alerts) for alerts in trade_alerts.values())
            for user_id, alerts in trade_alerts.items():
                for alert in alerts:
                    await context.bot.send_message(chat_id=str(user_id), text=alert, parse_mode='HTML')
            
            if total_trade_alerts:
                print(f"üì§ Sent {total_trade_alerts} trade alerts to {len(trade_alerts)} users")
            
            print(f"‚úÖ Alerts check complete. Active assets: {len(active_assets)}, "
                  f"Price alerts: {len(price_alerts)}, Trade alerts: {total_trade_alerts}")
    
    except Exception as e:
        print(f"‚ùå check_all_alerts error: {e}")
        traceback.print_exc()

# ----------------- BOT HANDLERS (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) -----------------
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    
    if user_id not in user_profiles:
        user_profiles[user_id] = "long"
    
    await update.message.reply_text(
        "üëã <b>–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Trading Bot v5</b>\n\n"
        "<b>üÜï –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:</b>\n"
        "‚Ä¢ ‚ö° –ü—Ä–æ–≤–µ—Ä–∫–∞ –¢–û–õ–¨–ö–û –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π\n"
        "‚Ä¢ üíæ –ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö\n"
        "‚Ä¢ üì¶ –£–º–Ω–æ–µ –∫–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ (TTL 5 –º–∏–Ω)\n"
        "‚Ä¢ üöÄ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç Binance API\n"
        "‚Ä¢ üìâ –°–Ω–∏–∂–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ 80%\n\n"
        "<b>üìä –§–£–ù–ö–¶–ò–ò:</b>\n"
        "‚Ä¢ üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å (–∞–∫—Ü–∏–∏ + –∫—Ä–∏–ø—Ç–∞)\n"
        "‚Ä¢ üéØ –°–¥–µ–ª–∫–∏ —Å —Ü–µ–ª–µ–≤–æ–π –ø—Ä–∏–±—ã–ª—å—é\n"
        "‚Ä¢ üìä –†—ã–Ω–æ—á–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã BUY/HOLD/SELL\n"
        "‚Ä¢ üîî –£–º–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é üëá",
        parse_mode='HTML',
        reply_markup=get_main_menu()
    )

async def cmd_portfolio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å"""
    user_id = update.effective_user.id
    portfolio = get_user_portfolio(user_id)
    
    if not portfolio or all(v == 0 for v in portfolio.values()):
        await update.message.reply_text(
            "üíº –í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <b>‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤</b>",
            parse_mode='HTML'
        )
        return
    
    try:
        lines = ["üíº <b>–í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å:</b>\n"]
        total_value_usd = 0
        
        async with aiohttp.ClientSession() as session:
            stock_items = [(k, v) for k, v in portfolio.items() if k in AVAILABLE_TICKERS]
            if stock_items and any(v > 0 for k, v in stock_items):
                lines.append("<b>üìä –ê–∫—Ü–∏–∏/ETF:</b>")
                lines.append("<pre>")
                lines.append("–ê–∫—Ç–∏–≤          –ö–æ–ª-–≤–æ    –¶–µ–Ω–∞        –°—É–º–º–∞")
                lines.append("‚îÄ" * 50)
                
                for ticker, quantity in stock_items:
                    if quantity == 0:
                        continue
                    price_data = await get_yahoo_price(session, ticker)
                    if price_data:
                        price, cur, _ = price_data
                        value = price * quantity
                        
                        name = AVAILABLE_TICKERS[ticker]['name'][:14].ljust(14)
                        qty_str = f"{quantity:.2f}".rjust(8)
                        price_str = f"{price:.2f}".rjust(8)
                        value_str = f"{value:.2f} {cur}".rjust(12)
                        
                        lines.append(f"{name} {qty_str} {price_str} {value_str}")
                        
                        if cur == "USD":
                            total_value_usd += value
                        elif cur == "EUR":
                            total_value_usd += value * 1.1
                    await asyncio.sleep(0.3)
                
                lines.append("</pre>")
            
            crypto_items = [(k, v) for k, v in portfolio.items() if k in CRYPTO_IDS]
            if crypto_items and any(v > 0 for k, v in crypto_items):
                lines.append("\n<b>‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:</b>")
                lines.append("<pre>")
                lines.append("–ú–æ–Ω–µ—Ç–∞    –ö–æ–ª-–≤–æ      –¶–µ–Ω–∞          –°—É–º–º–∞")
                lines.append("‚îÄ" * 50)
                
                for symbol, quantity in crypto_items:
                    if quantity == 0:
                        continue
                    crypto_data = await get_crypto_price(session, symbol)
                    if crypto_data:
                        price = crypto_data["usd"]
                        chg = crypto_data.get("change_24h")
                        value = price * quantity
                        total_value_usd += value
                        
                        sym_str = symbol.ljust(9)
                        qty_str = f"{quantity:.4f}".rjust(10)
                        price_str = f"${price:,.2f}".rjust(12)
                        value_str = f"${value:,.2f}".rjust(12)
                        
                        chg_emoji = "üìà" if chg and chg >= 0 else "üìâ" if chg else ""
                        lines.append(f"{sym_str} {qty_str} {price_str} {value_str} {chg_emoji}")
                    await asyncio.sleep(0.2)
                
                lines.append("</pre>")
        
        if total_value_usd > 0:
            lines.append(f"\n<b>üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ~${total_value_usd:,.2f}</b>")
        
        await update.message.reply_text("\n".join(lines), parse_mode='HTML')
    
    except Exception as e:
        print(f"‚ùå portfolio error: {e}")
        traceback.print_exc()
        await update.message.reply_text("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")

async def cmd_all_prices(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ü–µ–Ω—ã"""
    try:
        import pytz
        riga_tz = pytz.timezone('Europe/Riga')
        now = datetime.now(riga_tz)
        timestamp = now.strftime("%H:%M:%S %d.%m.%Y")
        
        lines = [
            f"üíπ <b>–í—Å–µ —Ü–µ–Ω—ã</b>\n",
            f"üïê –î–∞–Ω–Ω—ã–µ: <b>{timestamp}</b> (–†–∏–≥–∞)\n"
        ]
        
        async with aiohttp.ClientSession() as session:
            lines.append("<b>üìä –§–æ–Ω–¥–æ–≤—ã–π —Ä—ã–Ω–æ–∫:</b>")
            lines.append("<pre>")
            lines.append("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê")
            lines.append("‚îÇ –ê–∫—Ç–∏–≤            ‚îÇ –¶–µ–Ω–∞       ‚îÇ 24h     ‚îÇ")
            lines.append("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§")
            
            for ticker, info in AVAILABLE_TICKERS.items():
                price_data = await get_yahoo_price(session, ticker)
                if price_data:
                    price, cur, change_pct = price_data
                    name = info['name'][:16].ljust(16)
                    price_str = f"{price:.2f} {cur}".ljust(10)
                    
                    if change_pct != 0:
                        chg_emoji = "‚Üó" if change_pct >= 0 else "‚Üò"
                        chg_str = f"{chg_emoji}{abs(change_pct):.1f}%".rjust(7)
                    else:
                        chg_str = "0.0%".rjust(7)
                    
                    lines.append(f"‚îÇ {name} ‚îÇ {price_str} ‚îÇ {chg_str} ‚îÇ")
                else:
                    name = info['name'][:16].ljust(16)
                    lines.append(f"‚îÇ {name} ‚îÇ {'–Ω/–¥'.ljust(10)} ‚îÇ {'N/A'.rjust(7)} ‚îÇ")
                await asyncio.sleep(0.3)
            
            lines.append("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò")
            lines.append("</pre>")
            
            lines.append("\n<b>‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:</b>")
            lines.append("<pre>")
            lines.append("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê")
            lines.append("‚îÇ –ú–æ–Ω–µ—Ç–∞ ‚îÇ –¶–µ–Ω–∞         ‚îÇ 24h     ‚îÇ –ò—Å—Ç–æ—á–Ω–∏–∫ ‚îÇ")
            lines.append("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§")
            
            for symbol, info in CRYPTO_IDS.items():
                try:
                    crypto_data = await get_crypto_price(session, symbol)
                    if crypto_data:
                        price = crypto_data["usd"]
                        chg = crypto_data.get("change_24h")
                        source = crypto_data.get("source", "Unknown")[:8]
                        
                        sym_str = symbol.ljust(6)
                        price_str = f"${price:,.2f}".ljust(12)
                        
                        if chg and not math.isnan(chg):
                            chg_emoji = "‚Üó" if chg >= 0 else "‚Üò"
                            chg_str = f"{chg_emoji}{abs(chg):.1f}%".rjust(7)
                        else:
                            chg_str = "N/A".rjust(7)
                        
                        lines.append(f"‚îÇ {sym_str} ‚îÇ {price_str} ‚îÇ {chg_str} ‚îÇ {source.ljust(8)} ‚îÇ")
                    else:
                        sym_str = symbol.ljust(6)
                        lines.append(f"‚îÇ {sym_str} ‚îÇ {'–Ω/–¥'.ljust(12)} ‚îÇ {'N/A'.rjust(7)} ‚îÇ {'‚Äî'.ljust(8)} ‚îÇ")
                except Exception as e:
                    print(f"‚ùå {symbol} price error: {e}")
                    sym_str = symbol.ljust(6)
                    lines.append(f"‚îÇ {sym_str} ‚îÇ {'–æ—à–∏–±–∫–∞'.ljust(12)} ‚îÇ {'N/A'.rjust(7)} ‚îÇ {'‚Äî'.ljust(8)} ‚îÇ")
                
                await asyncio.sleep(0.2)
            
            lines.append("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò")
            lines.append("</pre>")
        
        await update.message.reply_text("\n".join(lines), parse_mode='HTML')
    
    except Exception as e:
        print(f"‚ùå all_prices error: {e}")
        traceback.print_exc()
        await update.message.reply_text("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")

async def cmd_my_trades(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–¥–µ–ª–∫–∏"""
    user_id = update.effective_user.id
    trades = get_user_trades(user_id)
    
    if not trades:
        await update.message.reply_text(
            "üéØ –£ –≤–∞—Å –Ω–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã—Ö —Å–¥–µ–ª–æ–∫\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <b>üÜï –ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞</b>",
            parse_mode='HTML'
        )
        return
    
    try:
        await update.message.reply_text("üîÑ –û–±–Ω–æ–≤–ª—è—é –¥–∞–Ω–Ω—ã–µ...")
        
        lines = ["üéØ <b>–í–∞—à–∏ —Å–¥–µ–ª–∫–∏:</b>\n"]
        
        async with aiohttp.ClientSession() as session:
            total_value = 0
            total_profit = 0
            
            for i, trade in enumerate(trades, 1):
                symbol = trade["symbol"]
                entry_price = trade["entry_price"]
                amount = trade["amount"]
                target = trade["target_profit_pct"]
                
                crypto_data = await get_crypto_price(session, symbol)
                if crypto_data:
                    current_price = crypto_data["usd"]
                    profit_pct = ((current_price - entry_price) / entry_price) * 100
                    profit_usd = amount * (current_price - entry_price)
                    value = amount * current_price
                    
                    total_value += value
                    total_profit += profit_usd
                    
                    if profit_pct >= target:
                        status = "‚úÖ –¶–ï–õ–¨"
                    elif profit_pct > 0:
                        status = "üìà –ü–†–ò–ë–´–õ–¨"
                    else:
                        status = "üìâ –£–ë–´–¢–û–ö"
                    
                    lines.append(f"{status} <b>#{i}. {symbol}</b>")
                    lines.append(f"‚îú –ö–æ–ª-–≤–æ: {amount:.4f}")
                    lines.append(f"‚îú –í—Ö–æ–¥: ${entry_price:,.2f} ‚Üí –°–µ–π—á–∞—Å: ${current_price:,.2f}")
                    lines.append(f"‚îú –ü—Ä–∏–±—ã–ª—å: <b>{profit_pct:+.2f}%</b> (${profit_usd:+,.2f})")
                    lines.append(f"‚îú –¶–µ–ª—å: {target}% {'‚úÖ' if profit_pct >= target else '‚è≥'}")
                    lines.append(f"‚îî –°—Ç–æ–∏–º–æ—Å—Ç—å: ${value:,.2f}\n")
                
                await asyncio.sleep(0.2)
            
            if total_value > 0:
                total_profit_pct = (total_profit / (total_value - total_profit)) * 100
                lines.append(f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ")
                lines.append(f"üí∞ <b>–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ${total_value:,.2f}</b>")
                lines.append(f"üìä <b>–û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: {total_profit_pct:+.2f}% (${total_profit:+,.2f})</b>")
        
        await update.message.reply_text("\n".join(lines), parse_mode='HTML')
    
    except Exception as e:
        print(f"‚ùå my_trades error: {e}")
        traceback.print_exc()
        await update.message.reply_text("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π - cmd_market_signals, cmd_profile, cmd_events, cmd_forecast, 
# cmd_add_asset, cmd_new_trade, conversation handlers, etc.)
# –ö–æ–ø–∏—Ä—É–µ–º –∏—Ö –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞, –æ–Ω–∏ –Ω–µ –º–µ–Ω—è—é—Ç—Å—è

async def cmd_market_signals(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†—ã–Ω–æ—á–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã"""
    user_id = update.effective_user.id
    investor_type = user_profiles.get(user_id, "long")
    type_info = INVESTOR_TYPES[investor_type]
    
    await update.message.reply_text(f"üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ä—ã–Ω–æ–∫ –¥–ª—è {type_info['emoji']} {type_info['name']}...")
    
    try:
        lines = [
            f"üìä <b>–†—ã–Ω–æ—á–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã</b>\n",
            f"–ü—Ä–æ—Ñ–∏–ª—å: {type_info['emoji']} <b>{type_info['name']}</b>\n"
        ]
        
        async with aiohttp.ClientSession() as session:
            fear_greed = await get_fear_greed_index(session)
            if fear_greed:
                if fear_greed < 25:
                    fg_status = "üò± –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã–π —Å—Ç—Ä–∞—Ö"
                elif fear_greed < 45:
                    fg_status = "üò∞ –°—Ç—Ä–∞—Ö"
                elif fear_greed < 55:
                    fg_status = "üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ"
                elif fear_greed < 75:
                    fg_status = "üòÉ –ñ–∞–¥–Ω–æ—Å—Ç—å"
                else:
                    fg_status = "ü§ë –≠–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω–∞—è –∂–∞–¥–Ω–æ—Å—Ç—å"
                
                lines.append(f"üìà Fear & Greed: <b>{fear_greed}/100</b> ({fg_status})\n")
            
            for symbol in ["BTC", "ETH", "SOL", "AVAX"]:
                signal_data = await get_market_signal(session, symbol, investor_type)
                
                lines.append(f"{signal_data['emoji']} <b>{symbol}: {signal_data['signal']}</b>")
                lines.append(f"   ‚îî {signal_data['reason']}\n")
                
                await asyncio.sleep(0.2)
        
        lines.append("\n<i>‚ö†Ô∏è –ù–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π</i>")
        
        await update.message.reply_text("\n".join(lines), parse_mode='HTML')
    
    except Exception as e:
        print(f"‚ùå market_signals error: {e}")
        traceback.print_exc()
        await update.message.reply_text("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤")

async def cmd_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Ñ–∏–ª—å –∏–Ω–≤–µ—Å—Ç–æ—Ä–∞"""
    user_id = update.effective_user.id
    current_type = user_profiles.get(user_id, "long")
    
    keyboard = []
    for type_key, type_info in INVESTOR_TYPES.items():
        selected = "‚úÖ " if type_key == current_type else ""
        keyboard.append([InlineKeyboardButton(
            f"{selected}{type_info['emoji']} {type_info['name']}",
            callback_data=f"profile_{type_key}"
        )])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    current_info = INVESTOR_TYPES[current_type]
    
    await update.message.reply_text(
        f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"–¢–µ–∫—É—â–∏–π: {current_info['emoji']} <b>{current_info['name']}</b>\n"
        f"<i>{current_info['desc']}</i>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–∏–≥–Ω–∞–ª–æ–≤:",
        parse_mode='HTML',
        reply_markup=reply_markup
    )

async def profile_select(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    investor_type = query.data.replace("profile_", "")
    user_id = query.from_user.id
    user_profiles[user_id] = investor_type
    
    type_info = INVESTOR_TYPES[investor_type]
    
    await query.edit_message_text(
        f"‚úÖ <b>–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω!</b>\n\n"
        f"{type_info['emoji']} <b>{type_info['name']}</b>\n"
        f"<i>{type_info['desc']}</i>\n\n"
        f"–¢–µ–ø–µ—Ä—å —Ä—ã–Ω–æ—á–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ–¥ –≤–∞—à —Å—Ç–∏–ª—å!",
        parse_mode='HTML'
    )

async def cmd_events(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–°–æ–±—ã—Ç–∏—è –Ω–µ–¥–µ–ª–∏"""
    try:
        lines = ["üì∞ <b>–°–æ–±—ã—Ç–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é</b>\n"]
        
        lines.append("<b>üìä –§–æ–Ω–¥–æ–≤—ã–π —Ä—ã–Ω–æ–∫:</b>\n")
        lines.append(f"<b>‚Ä¢ 02.11 - FOMC –∑–∞—Å–µ–¥–∞–Ω–∏–µ –§–†–°</b>")
        lines.append(f"  ‚ÑπÔ∏è –†–µ—à–µ–Ω–∏–µ –ø–æ –ø—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–π —Å—Ç–∞–≤–∫–µ")
        lines.append(f"  üìâ –í–ª–∏—è–Ω–∏–µ: –ü–æ–≤—ã—à–µ–Ω–∏–µ ‚Üí –¥–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –∞–∫—Ü–∏–∏\n")
        
        lines.append(f"<b>‚Ä¢ 03.11 - Earnings reports</b>")
        lines.append(f"  ‚ÑπÔ∏è Apple, Microsoft, Google")
        lines.append(f"  üìà –•–æ—Ä–æ—à–∏–µ –æ—Ç—á—ë—Ç—ã ‚Üí —Ä–æ—Å—Ç SPY, VWCE\n")
        
        lines.append("<b>‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:</b>\n")
        lines.append(f"<b>‚Ä¢ 02.11 - Bitcoin ETF —Ä–µ—à–µ–Ω–∏–µ SEC</b>")
        lines.append(f"  üöÄ –û–¥–æ–±—Ä–µ–Ω–∏–µ ‚Üí BTC +10-20%\n")
        
        lines.append(f"<b>‚Ä¢ 04.11 - Ethereum Dencun upgrade</b>")
        lines.append(f"  üìà ETH –æ–±—ã—á–Ω–æ —Ä–∞—Å—Ç—ë—Ç –ø–µ—Ä–µ–¥ upgrade\n")
        
        await update.message.reply_text("\n".join(lines), parse_mode='HTML')
    
    except Exception as e:
        print(f"‚ùå events error: {e}")
        await update.message.reply_text("‚ö† –û—à–∏–±–∫–∞")

async def cmd_forecast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≥–Ω–æ–∑—ã"""
    await update.message.reply_text(
        "üîÆ <b>–ü—Ä–æ–≥–Ω–æ–∑—ã</b>\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ üìä <b>–†—ã–Ω–æ—á–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã</b> –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π!",
        parse_mode='HTML'
    )

async def cmd_add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤"""
    if len(context.args) != 2:
        await update.message.reply_text(
            "‚ùå –§–æ—Ä–º–∞—Ç: <code>/add TICKER –ö–û–õ–ò–ß–ï–°–¢–í–û</code>",
            parse_mode='HTML'
        )
        return
    
    ticker = context.args[0].upper()
    try:
        quantity = float(context.args[1])
        if quantity <= 0:
            raise ValueError()
    except ValueError:
        await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å > 0")
        return
    
    if ticker not in AVAILABLE_TICKERS and ticker not in CRYPTO_IDS:
        await update.message.reply_text(
            f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–∫–µ—Ä: {ticker}\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ: VWCE.DE, 4GLD.DE, DE000A2T5DZ1.SG, SPY, BTC, ETH, SOL, AVAX, DOGE, LINK"
        )
        return
    
    user_id = update.effective_user.id
    portfolio = get_user_portfolio(user_id)
    portfolio[ticker] = portfolio.get(ticker, 0) + quantity
    save_portfolio(user_id, portfolio)
    
    name = AVAILABLE_TICKERS.get(ticker, {}).get("name") or CRYPTO_IDS.get(ticker, {}).get("name") or ticker
    await update.message.reply_text(
        f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: <b>{quantity} {name}</b>\n"
        f"–¢–µ–ø–µ—Ä—å —É –≤–∞—Å: {portfolio[ticker]:.4f}",
        parse_mode='HTML'
    )

# –î–æ–±–∞–≤–ª—è–µ–º conversation handlers (–∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª–∞)
async def cmd_add_asset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∞"""
    keyboard = [
        [InlineKeyboardButton("üìä –ê–∫—Ü–∏–∏ / ETF", callback_data="asset_stocks")],
        [InlineKeyboardButton("‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã", callback_data="asset_crypto")],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        "‚ûï <b>–î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:",
        parse_mode='HTML',
        reply_markup=reply_markup
    )
    return SELECT_ASSET_TYPE

async def add_asset_select_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    asset_type = query.data.replace("asset_", "")
    context.user_data['asset_type'] = asset_type
    
    keyboard = []
    
    if asset_type == "stocks":
        context.user_data['asset_category'] = "stocks"
        for ticker, info in AVAILABLE_TICKERS.items():
            keyboard.append([InlineKeyboardButton(
                f"{info['name']} ({ticker})",
                callback_data=f"addticker_{ticker}"
            )])
    else:
        context.user_data['asset_category'] = "crypto"
        for symbol, info in CRYPTO_IDS.items():
            keyboard.append([InlineKeyboardButton(
                f"{info['name']} ({symbol})",
                callback_data=f"addcrypto_{symbol}"
            )])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    type_emoji = "üìä" if asset_type == "stocks" else "‚Çø"
    type_name = "–ê–∫—Ü–∏–∏ / ETF" if asset_type == "stocks" else "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"
    
    await query.edit_message_text(
        f"{type_emoji} <b>{type_name}</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫—Ç–∏–≤:",
        parse_mode='HTML',
        reply_markup=reply_markup
    )
    return SELECT_ASSET

async def add_asset_select_item(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data.startswith("addticker_"):
        ticker = query.data.replace("addticker_", "")
        context.user_data['selected_asset'] = ticker
        name = AVAILABLE_TICKERS[ticker]['name']
        emoji = "üìä"
    else:
        symbol = query.data.replace("addcrypto_", "")
        context.user_data['selected_asset'] = symbol
        name = CRYPTO_IDS[symbol]['name']
        emoji = "‚Çø"
    
    await query.edit_message_text(
        f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {emoji} <b>{name}</b>\n\n"
        f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:",
        parse_mode='HTML'
    )
    return ENTER_ASSET_AMOUNT

async def add_asset_enter_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        amount = float(update.message.text.replace(",", "."))
        if amount <= 0:
            raise ValueError()
        
        user_id = update.effective_user.id
        asset = context.user_data['selected_asset']
        asset_category = context.user_data['asset_category']
        
        if asset_category == "stocks":
            name = AVAILABLE_TICKERS[asset]['name']
            emoji = "üìä"
        else:
            name = CRYPTO_IDS[asset]['name']
            emoji = "‚Çø"
        
        portfolio = get_user_portfolio(user_id)
        old_amount = portfolio.get(asset, 0)
        portfolio[asset] = old_amount + amount
        save_portfolio(user_id, portfolio)
        
        await update.message.reply_text(
            f"‚úÖ <b>–î–æ–±–∞–≤–ª–µ–Ω–æ!</b>\n\n"
            f"{emoji} <b>{name}</b>\n"
            f"–î–æ–±–∞–≤–ª–µ–Ω–æ: {amount:.4f}\n"
            f"–ë—ã–ª–æ: {old_amount:.4f}\n"
            f"–°—Ç–∞–ª–æ: {portfolio[asset]:.4f}",
            parse_mode='HTML',
            reply_markup=get_main_menu()
        )
        
        context.user_data.clear()
        return ConversationHandler.END
    
    except:
        await update.message.reply_text(
            "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ\n–ù–∞–ø—Ä–∏–º–µ—Ä: <code>10</code> –∏–ª–∏ <code>0.5</code>",
            parse_mode='HTML'
        )
        return ENTER_ASSET_AMOUNT

async def add_asset_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_menu())
    context.user_data.clear()
    return ConversationHandler.END

async def cmd_new_trade(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞"""
    keyboard = []
    for symbol in CRYPTO_IDS.keys():
        name = CRYPTO_IDS[symbol]['name']
        keyboard.append([InlineKeyboardButton(f"{name} ({symbol})", callback_data=f"trade_{symbol}")])
    
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üÜï <b>–ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É:",
        parse_mode='HTML',
        reply_markup=reply_markup
    )
    return SELECT_CRYPTO

async def trade_select_crypto(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    symbol = query.data.replace("trade_", "")
    context.user_data['trade_symbol'] = symbol
    
    await query.edit_message_text(
        f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: <b>{symbol}</b>\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ:",
        parse_mode='HTML'
    )
    return ENTER_AMOUNT

async def trade_enter_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        amount = float(update.message.text.replace(",", "."))
        if amount <= 0:
            raise ValueError()
        context.user_data['trade_amount'] = amount
        
        symbol = context.user_data['trade_symbol']
        await update.message.reply_text("üîÑ –ü–æ–ª—É—á–∞—é —Ü–µ–Ω—É...")
        
        async with aiohttp.ClientSession() as session:
            crypto_data = await get_crypto_price(session, symbol, use_cache=False)
        
        if crypto_data:
            current_price = crypto_data["usd"]
            context.user_data['trade_price'] = current_price
            
            keyboard = [[InlineKeyboardButton(
                f"‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å ${current_price:,.4f}",
                callback_data="price_continue"
            )]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            
            await update.message.reply_text(
                f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{amount:.4f}</b>\n\n"
                f"–¶–µ–Ω–∞: <b>${current_price:,.4f}</b>\n\n"
                f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Ü–µ–Ω—É:",
                parse_mode='HTML',
                reply_markup=reply_markup
            )
        else:
            await update.message.reply_text(
                f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: <b>{amount:.4f}</b>\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏ (USD):",
                parse_mode='HTML'
            )
        
        return ENTER_PRICE
    except:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return ENTER_AMOUNT

async def trade_enter_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        
        if query.data == "price_continue":
            price = context.user_data.get('trade_price')
            
            await query.edit_message_text(
                f"‚úÖ –¶–µ–Ω–∞: <b>${price:,.4f}</b>\n\n"
                f"–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –ø—Ä–∏–±—ã–ª—å (%):",
                parse_mode='HTML'
            )
            return ENTER_TARGET
    
    try:
        price = float(update.message.text.replace(",", ""))
        if price <= 0:
            raise ValueError()
        
        context.user_data['trade_price'] = price
        
        await update.message.reply_text(
            f"‚úÖ –¶–µ–Ω–∞: <b>${price:,.4f}</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –ø—Ä–∏–±—ã–ª—å (%):",
            parse_mode='HTML'
        )
        return ENTER_TARGET
    except:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return ENTER_PRICE

async def trade_enter_target(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        target = float(update.message.text)
        if target <= 0:
            raise ValueError()
        
        user_id = update.effective_user.id
        symbol = context.user_data['trade_symbol']
        amount = context.user_data['trade_amount']
        price = context.user_data['trade_price']
        
        add_trade(user_id, symbol, amount, price, target)
        
        await update.message.reply_text(
            f"‚úÖ <b>–°–¥–µ–ª–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>\n\n"
            f"üí∞ {symbol}\n"
            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {amount:.4f}\n"
            f"–¶–µ–Ω–∞: ${price:,.2f}\n"
            f"–¶–µ–ª—å: +{target}%",
            parse_mode='HTML',
            reply_markup=get_main_menu()
        )
        
        context.user_data.clear()
        return ConversationHandler.END
    except:
        await update.message.reply_text("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ")
        return ENTER_TARGET

async def trade_cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=get_main_menu())
    context.user_data.clear()
    return ConversationHandler.END

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å - Optimized Bot v5</b>\n\n"
        "<b>‚ö° –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–ò:</b>\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π\n"
        "‚Ä¢ –°–Ω–∏–∂–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ 80%\n"
        "‚Ä¢ –ü–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ–µ —Ö—Ä–∞–Ω–µ–Ω–∏–µ\n"
        "‚Ä¢ Binance API (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)\n\n"
        "<b>üìä –§–£–ù–ö–¶–ò–ò:</b>\n"
        "‚Ä¢ /add TICKER –ö–û–õ-–í–û\n"
        "‚Ä¢ üíº –ú–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å\n"
        "‚Ä¢ üéØ –ú–æ–∏ —Å–¥–µ–ª–∫–∏\n"
        "‚Ä¢ üìä –†—ã–Ω–æ—á–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã\n"
        "‚Ä¢ üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n\n"
        "<b>üîî –ê–ª–µ—Ä—Ç—ã:</b>\n"
        "‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã > –ø–æ—Ä–æ–≥–∞\n"
        "‚Ä¢ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ü–µ–ª–µ–≤–æ–π –ø—Ä–∏–±—ã–ª–∏",
        parse_mode='HTML'
    )

async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    
    if text == "üíº –ú–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å":
        await cmd_portfolio(update, context)
    elif text == "üíπ –í—Å–µ —Ü–µ–Ω—ã":
        await cmd_all_prices(update, context)
    elif text == "üéØ –ú–æ–∏ —Å–¥–µ–ª–∫–∏":
        await cmd_my_trades(update, context)
    elif text == "üìä –†—ã–Ω–æ—á–Ω—ã–µ —Å–∏–≥–Ω–∞–ª—ã":
        await cmd_market_signals(update, context)
    elif text == "üì∞ –°–æ–±—ã—Ç–∏—è –Ω–µ–¥–µ–ª–∏":
        await cmd_events(update, context)
    elif text == "üîÆ –ü—Ä–æ–≥–Ω–æ–∑—ã":
        await cmd_forecast(update, context)
    elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤":
        return await cmd_add_asset(update, context)
    elif text == "üÜï –ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞":
        return await cmd_new_trade(update, context)
    elif text == "üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å":
        await cmd_profile(update, context)
    elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        await cmd_help(update, context)

async def on_error(update: object, context: ContextTypes.DEFAULT_TYPE):
    print(f"‚ùå Error: {context.error}")
    traceback.print_exc()

def main():
    print("=" * 60)
    print("üöÄ Starting OPTIMIZED Trading Bot v5")
    print("=" * 60)
    print("Optimizations:")
    print("  ‚ö° Only active assets checked")
    print("  üì¶ Smart caching (TTL 5min)")
    print("  üíæ Persistent storage")
    print("  üöÄ Binance priority")
    print("  üìâ 80% less API calls")
    print("=" * 60)
    
    import sys
    if sys.version_info >= (3, 10):
        try:
            loop = asyncio.get_running_loop()
        except RuntimeError:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
    
    app = Application.builder().token(TOKEN).build()
    
    # Conversation handlers
    trade_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^üÜï –ù–æ–≤–∞—è —Å–¥–µ–ª–∫–∞$'), cmd_new_trade)],
        states={
            SELECT_CRYPTO: [CallbackQueryHandler(trade_select_crypto, pattern='^trade_')],
            ENTER_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, trade_enter_amount)],
            ENTER_PRICE: [
                CallbackQueryHandler(trade_enter_price, pattern='^price_'),
                MessageHandler(filters.TEXT & ~filters.COMMAND, trade_enter_price)
            ],
            ENTER_TARGET: [MessageHandler(filters.TEXT & ~filters.COMMAND, trade_enter_target)],
        },
        fallbacks=[CommandHandler('cancel', trade_cancel)],
    )
    
    add_asset_conv = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤$'), cmd_add_asset)],
        states={
            SELECT_ASSET_TYPE: [CallbackQueryHandler(add_asset_select_type, pattern='^asset_')],
            SELECT_ASSET: [CallbackQueryHandler(add_asset_select_item, pattern='^add(ticker|crypto)_')],
            ENTER_ASSET_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_asset_enter_amount)],
        },
        fallbacks=[CommandHandler('cancel', add_asset_cancel)],
    )
    
    # Commands
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("add", cmd_add))
    app.add_handler(CommandHandler("help", cmd_help))
    
    # Conversations
    app.add_handler(trade_conv)
    app.add_handler(add_asset_conv)
    app.add_handler(CallbackQueryHandler(profile_select, pattern='^profile_'))
    
    # Buttons
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_buttons))
    
    # Errors
    app.add_error_handler(on_error)
    
    # –ï–î–ò–ù–ê–Ø —Ñ–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤
    job_queue = app.job_queue
    if job_queue and CHAT_ID:
        job_queue.run_repeating(check_all_alerts, interval=600, first=60)
        print("‚úÖ UNIFIED alerts (price + trade): ENABLED")
    else:
        print("‚ö†Ô∏è  Alerts DISABLED (set CHAT_ID)")
    
    print("=" * 60)
    print("üîÑ Starting bot...")
    print("=" * 60)
    
    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
