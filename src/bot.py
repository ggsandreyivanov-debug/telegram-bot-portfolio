import os
import math
import json
import asyncio
import traceback
import aiohttp
from typing import Dict, Any, Optional, Tuple, List
from datetime import time as dt_time

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    CallbackQueryHandler,
)

# === ENV ===
TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
LUNARCRUSH_API_KEY = os.getenv("LUNARCRUSH_API_KEY", "lsnio8kvswz9egysxeb8tzybcmhc2zcuee74kwz")

if not TOKEN:
    raise RuntimeError("‚ö† BOT_TOKEN is not set in environment!")
if not CHAT_ID:
    print("‚ö† CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–∫–ª—é—á–µ–Ω—ã")

# === CONFIG ===
HEADERS = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
    "Accept": "application/json",
    "Accept-Language": "en-US,en;q=0.9",
}
TIMEOUT = aiohttp.ClientTimeout(total=15)

# –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
AVAILABLE_TICKERS = {
    "VWCE.DE": {"name": "VWCE", "type": "stock"},
    "4GLD.DE": {"name": "4GLD (Gold ETC)", "type": "stock"},
    "DE000A2T5DZ1.SG": {"name": "X IE Physical Gold ETC", "type": "stock"},
    "SPY": {"name": "S&P 500 (SPY)", "type": "stock"},
}

# –ö—Ä–∏–ø—Ç–∞: CoinGecko id + CoinPaprika id
CRYPTO_IDS = {
    "BTC": {"coingecko": "bitcoin", "paprika": "btc-bitcoin", "name": "Bitcoin"},
    "ETH": {"coingecko": "ethereum", "paprika": "eth-ethereum", "name": "Ethereum"},
    "SOL": {"coingecko": "solana", "paprika": "sol-solana", "name": "Solana"},
    "AVAX": {"coingecko": "avalanche-2", "paprika": "avax-avalanche", "name": "Avalanche"},
    "DOGE": {"coingecko": "dogecoin", "paprika": "doge-dogecoin", "name": "Dogecoin"},
    "LINK": {"coingecko": "chainlink", "paprika": "link-chainlink", "name": "Chainlink"},
}

# –ü–æ—Ä–æ–≥–∏ –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤
THRESHOLDS = {
    "stocks": 1.0,
    "crypto": 4.0,
}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π (–≤ –ø–∞–º—è—Ç–∏, –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ñ–∞–π–ª/–ë–î)
user_portfolios: Dict[int, Dict[str, float]] = {}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ü–µ–Ω –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤
last_prices: Dict[str, float] = {}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu():
    keyboard = [
        [KeyboardButton("üíº –ú–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å"), KeyboardButton("üíπ –í—Å–µ —Ü–µ–Ω—ã")],
        [KeyboardButton("üì∞ –°–æ–±—ã—Ç–∏—è –Ω–µ–¥–µ–ª–∏"), KeyboardButton("üìä –ü—Ä–æ–≥–Ω–æ–∑—ã")],
        [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤"), KeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤")],
        [KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤"), KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")],
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# ----------------- HTTP helpers -----------------
async def get_json(session: aiohttp.ClientSession, url: str, params=None) -> Optional[Dict[str, Any]]:
    try:
        async with session.get(url, params=params, headers=HEADERS, timeout=TIMEOUT) as r:
            if r.status != 200:
                print(f"‚ö† {url} -> HTTP {r.status}")
                return None
            data = await r.json()
            return data
    except Exception as e:
        print(f"‚ùå get_json({url}) error: {e}")
        return None

# ----------------- PRICES: Yahoo Finance -----------------
async def get_yahoo_price(session: aiohttp.ClientSession, ticker: str) -> Optional[Tuple[float, str, float]]:
    """–ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –æ–¥–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞ —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º –∑–∞ –¥–µ–Ω—å"""
    try:
        url = f"https://query2.finance.yahoo.com/v8/finance/chart/{ticker}"
        params = {"interval": "1d", "range": "1d"}
        data = await get_json(session, url, params)
        
        if data:
            result = data.get("chart", {}).get("result", [{}])[0]
            meta = result.get("meta", {})
            price = meta.get("regularMarketPrice")
            cur = meta.get("currency", "USD")
            change_pct = meta.get("regularMarketChangePercent", 0)
            
            if price:
                return (float(price), cur, float(change_pct))
    except Exception as e:
        print(f"‚ùå Yahoo {ticker} error: {e}")
    return None

# ----------------- PRICES: CoinPaprika -----------------
async def get_crypto_price(session: aiohttp.ClientSession, symbol: str) -> Optional[Dict[str, Any]]:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º fallback –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º:
    1. CoinPaprika ‚Üí 2. CoinGecko ‚Üí 3. CryptoCompare
    """
    crypto_info = CRYPTO_IDS.get(symbol)
    if not crypto_info:
        return None
    
    # –ü—Ä–æ–±—É–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –ø–æ –æ—á–µ—Ä–µ–¥–∏
    sources = [
        ("CoinPaprika", lambda: get_from_coinpaprika(session, crypto_info)),
        ("CoinGecko", lambda: get_from_coingecko(session, crypto_info)),
        ("CryptoCompare", lambda: get_from_cryptocompare(session, symbol)),
    ]
    
    for source_name, fetch_func in sources:
        try:
            result = await fetch_func()
            if result and result.get("usd"):
                result["source"] = source_name
                price = result['usd']
                chg = result.get('change_24h')
                chg_str = f"{chg:+.2f}%" if chg else "N/A"
                print(f"‚úÖ {symbol} from {source_name}: ${price:,.2f} ({chg_str})")
                return result
        except Exception as e:
            print(f"‚ö†Ô∏è {source_name} failed for {symbol}: {e}")
            continue
    
    print(f"‚ùå All sources failed for {symbol}")
    return None

async def get_from_coinpaprika(session: aiohttp.ClientSession, crypto_info: dict) -> Optional[Dict[str, float]]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å CoinPaprika"""
    paprika_id = crypto_info["paprika"]
    url = f"https://api.coinpaprika.com/v1/tickers/{paprika_id}"
    data = await get_json(session, url, None)
    
    if data:
        quotes = data.get("quotes", {}).get("USD", {})
        price = quotes.get("price")
        change_24h = quotes.get("percent_change_24h")
        if price:
            return {
                "usd": float(price),
                "change_24h": float(change_24h) if change_24h else None
            }
    return None

async def get_from_coingecko(session: aiohttp.ClientSession, crypto_info: dict) -> Optional[Dict[str, float]]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å CoinGecko"""
    coingecko_id = crypto_info["coingecko"]
    url = "https://api.coingecko.com/api/v3/simple/price"
    params = {
        "ids": coingecko_id,
        "vs_currencies": "usd",
        "include_24hr_change": "true"
    }
    data = await get_json(session, url, params)
    
    if data and coingecko_id in data:
        coin_data = data[coingecko_id]
        price = coin_data.get("usd")
        change_24h = coin_data.get("usd_24h_change")
        if price:
            return {
                "usd": float(price),
                "change_24h": float(change_24h) if change_24h else None
            }
    return None

async def get_from_cryptocompare(session: aiohttp.ClientSession, symbol: str) -> Optional[Dict[str, float]]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å CryptoCompare"""
    url = "https://min-api.cryptocompare.com/data/pricemultifull"
    params = {
        "fsyms": symbol,
        "tsyms": "USD"
    }
    data = await get_json(session, url, params)
    
    if data and "RAW" in data and symbol in data["RAW"]:
        coin_data = data["RAW"][symbol]["USD"]
        price = coin_data.get("PRICE")
        change_24h = coin_data.get("CHANGEPCT24HOUR")
        if price:
            return {
                "usd": float(price),
                "change_24h": float(change_24h) if change_24h else None
            }
    return None
    try:
        crypto_info = CRYPTO_IDS.get(symbol)
        if not crypto_info:
            return None
        
        # –ü—Ä–æ–±—É–µ–º CoinPaprika
        paprika_id = crypto_info["paprika"]
        url = f"https://api.coinpaprika.com/v1/tickers/{paprika_id}"
        
        print(f"üîç Fetching {symbol} from CoinPaprika: {url}")
        data = await get_json(session, url, None)
        
        if data:
            quotes = data.get("quotes", {}).get("USD", {})
            price = quotes.get("price")
            change_24h = quotes.get("percent_change_24h")
            if price:
                print(f"‚úÖ {symbol}: ${price:,.2f} ({change_24h:+.2f}% if change_24h else 'N/A'})")
                return {
                    "usd": float(price),
                    "change_24h": float(change_24h) if change_24h else None
                }
        
        # Fallback –Ω–∞ CoinGecko
        print(f"‚ö†Ô∏è CoinPaprika failed for {symbol}, trying CoinGecko...")
        coingecko_id = crypto_info["coingecko"]
        cg_url = "https://api.coingecko.com/api/v3/simple/price"
        cg_params = {
            "ids": coingecko_id,
            "vs_currencies": "usd",
            "include_24hr_change": "true"
        }
        
        cg_data = await get_json(session, cg_url, cg_params)
        if cg_data and coingecko_id in cg_data:
            coin_data = cg_data[coingecko_id]
            price = coin_data.get("usd")
            change_24h = coin_data.get("usd_24h_change")
            if price:
                print(f"‚úÖ {symbol} from CoinGecko: ${price:,.2f}")
                return {
                    "usd": float(price),
                    "change_24h": float(change_24h) if change_24h else None
                }
        
        print(f"‚ùå Both APIs failed for {symbol}")
        
    except Exception as e:
        print(f"‚ùå get_crypto_price {symbol} error: {e}")
        traceback.print_exc()
    
    return None

# ----------------- EVENTS & NEWS -----------------
async def get_fear_greed_index(session: aiohttp.ClientSession) -> Optional[int]:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–∞—Ö–∞ –∏ –∂–∞–¥–Ω–æ—Å—Ç–∏ (0-100)"""
    try:
        url = "https://api.alternative.me/fng/"
        data = await get_json(session, url, None)
        if data and "data" in data:
            return int(data["data"][0]["value"])
    except Exception as e:
        print(f"‚ùå Fear & Greed error: {e}")
    return None

async def get_lunarcrush_sentiment(session: aiohttp.ClientSession, symbol: str) -> Optional[Dict[str, float]]:
    """–ü–æ–ª—É—á–∏—Ç—å sentiment score —Å LunarCrush"""
    try:
        # –ú–∞–ø–ø–∏–Ω–≥ —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è LunarCrush
        symbol_map = {
            "BTC": "BTC",
            "ETH": "ETH",
            "SOL": "SOL",
            "AVAX": "AVAX",
            "DOGE": "DOGE",
            "LINK": "LINK"
        }
        
        lc_symbol = symbol_map.get(symbol)
        if not lc_symbol:
            return None
        
        url = "https://lunarcrush.com/api4/public/coins/list/v2"
        headers = {
            **HEADERS,
            "Authorization": f"Bearer {LUNARCRUSH_API_KEY}"
        }
        
        params = {"symbol": lc_symbol}
        
        async with session.get(url, params=params, headers=headers, timeout=TIMEOUT) as r:
            if r.status == 200:
                data = await r.json()
                if data and "data" in data and len(data["data"]) > 0:
                    coin = data["data"][0]
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
                    galaxy_score = coin.get("galaxy_score", 50)  # 0-100
                    alt_rank = coin.get("alt_rank", 500)  # –†–µ–π—Ç–∏–Ω–≥ (–º–µ–Ω—å—à–µ = –ª—É—á—à–µ)
                    sentiment = coin.get("sentiment", 3)  # 1-5
                    
                    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º sentiment (1-5 ‚Üí 0-100)
                    sentiment_score = ((sentiment - 1) / 4) * 100
                    
                    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º rank (—Ç–æ–ø 100 = —Ö–æ—Ä–æ—à–æ)
                    rank_score = max(0, 100 - (alt_rank / 5))
                    
                    return {
                        "galaxy_score": galaxy_score,
                        "sentiment_score": sentiment_score,
                        "rank_score": rank_score,
                        "overall": (galaxy_score + sentiment_score + rank_score) / 3
                    }
    except Exception as e:
        print(f"‚ùå LunarCrush {symbol} error: {e}")
    return None

async def calculate_trend_score(session: aiohttp.ClientSession, symbol: str) -> float:
    """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç—Ä–µ–Ω–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ 7-–¥–Ω–µ–≤–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –î–ª—è –∫—Ä–∏–ø—Ç—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º CoinPaprika historical
        if symbol in CRYPTO_IDS:
            paprika_id = CRYPTO_IDS[symbol]["paprika"]
            url = f"https://api.coinpaprika.com/v1/tickers/{paprika_id}/historical"
            
            from datetime import datetime, timedelta
            end = datetime.now()
            start = end - timedelta(days=7)
            
            params = {
                "start": start.strftime("%Y-%m-%d"),
                "end": end.strftime("%Y-%m-%d"),
                "interval": "1d"
            }
            
            data = await get_json(session, url, params)
            if data and len(data) >= 2:
                first_price = data[0].get("price", 0)
                last_price = data[-1].get("price", 0)
                
                if first_price > 0:
                    change_pct = ((last_price - first_price) / first_price) * 100
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ score 0-100
                    # +20% = 100, -20% = 0
                    trend_score = 50 + (change_pct * 2.5)
                    return max(0, min(100, trend_score))
    except Exception as e:
        print(f"‚ùå Trend calculation error: {e}")
    
    return 50.0  # –ù–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π —Ç—Ä–µ–Ω–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

async def calculate_probability(session: aiohttp.ClientSession, symbol: str, event_impact: str) -> Dict[str, Any]:
    """–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ multiple —Ñ–∞–∫—Ç–æ—Ä–æ–≤"""
    
    # –ë–∞–∑–æ–≤–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–æ —Ç–∏–ø—É —Å–æ–±—ã—Ç–∏—è
    impact_scores = {
        "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π": 30,  # –í—ã—Å–æ–∫–∞—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ—Å—Ç—å
        "–í—ã—Å–æ–∫–∏–π": 20,
        "–°—Ä–µ–¥–Ω–∏–π": 10,
        "–ù–∏–∑–∫–∏–π": 5
    }
    
    event_score = impact_scores.get(event_impact, 10)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    fear_greed = await get_fear_greed_index(session) or 50
    sentiment_data = await get_lunarcrush_sentiment(session, symbol) or {"overall": 50}
    trend_score = await calculate_trend_score(session, symbol)
    
    # –§–æ—Ä–º—É–ª–∞: –≤–∑–≤–µ—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞
    probability = (
        fear_greed * 0.25 +           # 25% - –æ–±—â–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞
        sentiment_data["overall"] * 0.30 +  # 30% - sentiment –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –º–æ–Ω–µ—Ç—ã
        trend_score * 0.30 +          # 30% - –Ω–µ–¥–∞–≤–Ω–∏–π —Ç—Ä–µ–Ω–¥
        event_score * 0.15            # 15% - –≤–ª–∏—è–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
    )
    
    probability = max(20, min(80, probability))  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 20-80%
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
    if probability >= 65:
        prediction = f"üìà –†–æ—Å—Ç –≤–µ—Ä–æ—è—Ç–µ–Ω"
        price_change = f"+{2 + (probability - 65) * 0.2:.1f}%"
        confidence = "–≤—ã—Å–æ–∫–∞—è"
        recommendation = "üü¢ –ü–û–ö–£–ü–ê–¢–¨"
    elif probability >= 55:
        prediction = f"üìà –ù–µ–±–æ–ª—å—à–æ–π —Ä–æ—Å—Ç"
        price_change = f"+{0.5 + (probability - 55) * 0.15:.1f}%"
        confidence = "—Å—Ä–µ–¥–Ω—è—è"
        recommendation = "üü° –î–ï–†–ñ–ê–¢–¨"
    elif probability >= 45:
        prediction = f"üìä –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ"
        price_change = "¬±0.5-1.5%"
        confidence = "–Ω–∏–∑–∫–∞—è"
        recommendation = "üü° –í–û–ó–î–ï–†–ñ–ê–¢–¨–°–Ø"
    elif probability >= 35:
        prediction = f"üìâ –ù–µ–±–æ–ª—å—à–æ–µ –ø–∞–¥–µ–Ω–∏–µ"
        price_change = f"-{0.5 + (45 - probability) * 0.15:.1f}%"
        confidence = "—Å—Ä–µ–¥–Ω—è—è"
        recommendation = "üü° –î–ï–†–ñ–ê–¢–¨"
    else:
        prediction = f"üìâ –ü–∞–¥–µ–Ω–∏–µ –≤–µ—Ä–æ—è—Ç–Ω–æ"
        price_change = f"-{2 + (35 - probability) * 0.2:.1f}%"
        confidence = "–≤—ã—Å–æ–∫–∞—è"
        recommendation = "üî¥ –ü–†–û–î–ê–í–ê–¢–¨"
    
    return {
        "probability": probability,
        "prediction": prediction,
        "price_change": price_change,
        "confidence": confidence,
        "recommendation": recommendation,
        "factors": {
            "fear_greed": fear_greed,
            "sentiment": sentiment_data["overall"],
            "trend": trend_score
        }
    }

async def get_crypto_events(session: aiohttp.ClientSession) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —Å —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é"""
    events = []
    
    try:
        from datetime import datetime, timedelta
        base_date = datetime.now()
        
        # –ü—Ä–∏–º–µ—Ä—ã –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π API)
        sample_events = [
            {
                "asset": "BTC",
                "date": (base_date + timedelta(days=2)).strftime("%d.%m"),
                "title": "Bitcoin ETF —Ä–µ—à–µ–Ω–∏–µ SEC",
                "impact": "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π"
            },
            {
                "asset": "ETH",
                "date": (base_date + timedelta(days=4)).strftime("%d.%m"),
                "title": "Ethereum network upgrade",
                "impact": "–í—ã—Å–æ–∫–∏–π"
            },
            {
                "asset": "SOL",
                "date": (base_date + timedelta(days=1)).strftime("%d.%m"),
                "title": "Solana Breakpoint Conference",
                "impact": "–°—Ä–µ–¥–Ω–∏–π"
            }
        ]
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
        for event in sample_events:
            symbol = event["asset"]
            impact = event["impact"]
            
            # –†–µ–∞–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
            prob_data = await calculate_probability(session, symbol, impact)
            
            event["prediction"] = prob_data["prediction"]
            event["price_change"] = prob_data["price_change"]
            event["probability"] = prob_data["probability"]
            events.append(event)
            
            await asyncio.sleep(0.5)  # Rate limiting
    
    except Exception as e:
        print(f"‚ùå get_crypto_events error: {e}")
        traceback.print_exc()
    
    return events

async def get_stock_events(session: aiohttp.ClientSession) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∞–∫—Ü–∏–π/ETF —Å –∞–Ω–∞–ª–∏–∑–æ–º –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏"""
    events = []
    
    from datetime import datetime, timedelta
    base_date = datetime.now()
    
    # –ü—Ä–∏–º–µ—Ä—ã –≤–∞–∂–Ω—ã—Ö –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π
    sample_events = [
        {
            "asset": "SPY",
            "date": (base_date + timedelta(days=2)).strftime("%d.%m"),
            "title": "FOMC –∑–∞—Å–µ–¥–∞–Ω–∏–µ",
            "impact": "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π"
        },
        {
            "asset": "SPY",
            "date": (base_date + timedelta(days=3)).strftime("%d.%m"),
            "title": "–û—Ç—á—ë—Ç—ã Apple, Amazon",
            "impact": "–í—ã—Å–æ–∫–∏–π"
        },
        {
            "asset": "VWCE.DE",
            "date": (base_date + timedelta(days=5)).strftime("%d.%m"),
            "title": "–î–∞–Ω–Ω—ã–µ –ø–æ –∏–Ω—Ñ–ª—è—Ü–∏–∏ –ï–°",
            "impact": "–°—Ä–µ–¥–Ω–∏–π"
        }
    ]
    
    # –î–ª—è –∞–∫—Ü–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â—ë–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (–±–µ–∑ LunarCrush)
    for event in sample_events:
        impact = event["impact"]
        
        # –ë–∞–∑–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
        if "FOMC" in event["title"] or "Fed" in event["title"]:
            prob = 48  # –í—ã—Å–æ–∫–∞—è –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ—Å—Ç—å
            pred = "‚ö†Ô∏è –í—ã—Å–æ–∫–∞—è –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å"
            change = "¬±2-4%"
            rec = "üü° –í–û–ó–î–ï–†–ñ–ê–¢–¨–°–Ø"
        elif "–æ—Ç—á—ë—Ç" in event["title"].lower() or "earnings" in event["title"].lower():
            prob = 58  # –£–º–µ—Ä–µ–Ω–Ω—ã–π –æ–ø—Ç–∏–º–∏–∑–º
            pred = "üìà –í–æ–∑–º–æ–∂–µ–Ω —Ä–æ—Å—Ç"
            change = "+1-3%"
            rec = "üü¢ –î–ï–†–ñ–ê–¢–¨"
        elif "–∏–Ω—Ñ–ª—è—Ü" in event["title"].lower():
            prob = 52
            pred = "üìä –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ"
            change = "¬±0.5-1.5%"
            rec = "üü° –î–ï–†–ñ–ê–¢–¨"
        else:
            prob = 50
            pred = "üìä –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ"
            change = "¬±1-2%"
            rec = "üü° –î–ï–†–ñ–ê–¢–¨"
        
        event["prediction"] = pred
        event["price_change"] = change
        event["probability"] = prob
        event["recommendation"] = rec
        event["confidence"] = "—Å—Ä–µ–¥–Ω—è—è"
        events.append(event)
    
    return events
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —Å CoinMarketCal (–±–µ—Å–ø–ª–∞—Ç–Ω—ã–π API)"""
    events = []
    
    try:
        from datetime import datetime, timedelta
        
        # –°–æ–±—ã—Ç–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é –≤–ø–µ—Ä—ë–¥
        date_from = datetime.now().strftime("%Y-%m-%d")
        date_to = (datetime.now() + timedelta(days=7)).strftime("%Y-%m-%d")
        
        # CoinMarketCal API (–±–µ–∑ –∫–ª—é—á–∞ –º–æ–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–ø —Å–æ–±—ã—Ç–∏—è)
        url = f"https://developers.coinmarketcal.com/v1/events"
        params = {
            "dateRangeStart": date_from,
            "dateRangeEnd": date_to,
            "max": 20
        }
        
        # –ü—Ä–æ–±—É–µ–º –±–µ–∑ API –∫–ª—é—á–∞ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø)
        data = await get_json(session, url, params)
        
        if data and isinstance(data, dict) and "body" in data:
            for event in data.get("body", [])[:10]:
                coins = event.get("coins", [])
                if not coins:
                    continue
                
                coin_symbol = coins[0].get("symbol", "").upper()
                if coin_symbol not in CRYPTO_IDS:
                    continue
                
                events.append({
                    "asset": coin_symbol,
                    "date": event.get("date_event", ""),
                    "title": event.get("title", {}).get("en", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ"),
                    "impact": "–í—ã—Å–æ–∫–∏–π" if event.get("vote_count", 0) > 100 else "–°—Ä–µ–¥–Ω–∏–π",
                    "prediction": "üìà" if event.get("percentage", 0) > 50 else "üìâ"
                })
    except Exception as e:
        print(f"‚ùå CoinMarketCal error: {e}")
    
    # –ï—Å–ª–∏ API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π
    if not events:
        from datetime import datetime, timedelta
        base_date = datetime.now()
        
        events = [
            {
                "asset": "BTC",
                "date": (base_date + timedelta(days=2)).strftime("%d.%m"),
                "title": "Bitcoin ETF —Ä–µ—à–µ–Ω–∏–µ SEC",
                "impact": "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π",
                "prediction": "üìà –†–æ—Å—Ç 5-8%"
            },
            {
                "asset": "ETH",
                "date": (base_date + timedelta(days=4)).strftime("%d.%m"),
                "title": "Ethereum network upgrade",
                "impact": "–í—ã—Å–æ–∫–∏–π",
                "prediction": "üìà –†–æ—Å—Ç 3-7%"
            },
            {
                "asset": "SOL",
                "date": (base_date + timedelta(days=1)).strftime("%d.%m"),
                "title": "Solana Breakpoint Conference",
                "impact": "–°—Ä–µ–¥–Ω–∏–π",
                "prediction": "üìà –†–æ—Å—Ç 2-4%"
            }
        ]
    
    return events

async def get_stock_events(session: aiohttp.ClientSession) -> List[Dict[str, Any]]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è –¥–ª—è –∞–∫—Ü–∏–π/ETF"""
    events = []
    
    from datetime import datetime, timedelta
    base_date = datetime.now()
    
    # –ü—Ä–∏–º–µ—Ä—ã –≤–∞–∂–Ω—ã—Ö –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π
    events = [
        {
            "asset": "SPY",
            "date": (base_date + timedelta(days=2)).strftime("%d.%m"),
            "title": "FOMC –∑–∞—Å–µ–¥–∞–Ω–∏–µ",
            "impact": "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π",
            "prediction": "‚ö†Ô∏è –í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å"
        },
        {
            "asset": "SPY",
            "date": (base_date + timedelta(days=3)).strftime("%d.%m"),
            "title": "–û—Ç—á—ë—Ç—ã Apple, Amazon",
            "impact": "–í—ã—Å–æ–∫–∏–π",
            "prediction": "üìà –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Ä–æ—Å—Ç–∞ 60%"
        },
        {
            "asset": "VWCE.DE",
            "date": (base_date + timedelta(days=5)).strftime("%d.%m"),
            "title": "–î–∞–Ω–Ω—ã–µ –ø–æ –∏–Ω—Ñ–ª—è—Ü–∏–∏ –ï–°",
            "impact": "–°—Ä–µ–¥–Ω–∏–π",
            "prediction": "üìä –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ"
        }
    ]
    
    return events

# ----------------- Portfolio Management -----------------
def get_user_portfolio(user_id: int) -> Dict[str, float]:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_portfolios:
        # –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å
        user_portfolios[user_id] = {
            "VWCE.DE": 0,
            "DE000A2T5DZ1.SG": 0,
            "BTC": 0,
            "ETH": 0,
            "SOL": 0,
        }
    return user_portfolios[user_id]

def save_portfolio(user_id: int, portfolio: Dict[str, float]):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å"""
    user_portfolios[user_id] = portfolio

# ----------------- MONITORING LOGIC -----------------
async def check_price_alerts(context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç"""
    if not CHAT_ID:
        print("‚ö†Ô∏è CHAT_ID not set, skipping alerts")
        return
    
    print("üîî Running price alerts check...")
    
    try:
        async with aiohttp.ClientSession() as session:
            alerts = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ü–∏–∏/ETF
            print("üìä Checking stocks/ETF...")
            for ticker in AVAILABLE_TICKERS:
                price_data = await get_yahoo_price(session, ticker)
                if not price_data:
                    continue
                
                price, currency = price_data
                cache_key = f"stock_{ticker}"
                
                if cache_key in last_prices:
                    old_price = last_prices[cache_key]
                    change_pct = ((price - old_price) / old_price) * 100
                    print(f"  {ticker}: {old_price:.2f} -> {price:.2f} ({change_pct:+.2f}%)")
                    
                    if abs(change_pct) >= THRESHOLDS["stocks"]:
                        name = AVAILABLE_TICKERS[ticker]["name"]
                        emoji = "üìà" if change_pct > 0 else "üìâ"
                        alerts.append(
                            f"{emoji} <b>{name}</b>: {change_pct:+.2f}%\n"
                            f"–¶–µ–Ω–∞: {price:.2f} {currency}"
                        )
                        print(f"  üö® ALERT! {name} changed by {change_pct:+.2f}%")
                else:
                    print(f"  {ticker}: First check, storing price {price:.2f}")
                
                last_prices[cache_key] = price
                await asyncio.sleep(0.3)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
            print("‚Çø Checking crypto...")
            for symbol in CRYPTO_IDS:
                crypto_data = await get_crypto_price(session, symbol)
                if not crypto_data:
                    continue
                
                price = crypto_data["usd"]
                cache_key = f"crypto_{symbol}"
                
                if cache_key in last_prices:
                    old_price = last_prices[cache_key]
                    change_pct = ((price - old_price) / old_price) * 100
                    print(f"  {symbol}: ${old_price:,.2f} -> ${price:,.2f} ({change_pct:+.2f}%)")
                    
                    if abs(change_pct) >= THRESHOLDS["crypto"]:
                        emoji = "üöÄ" if change_pct > 0 else "‚ö†Ô∏è"
                        alerts.append(
                            f"{emoji} <b>{symbol}</b>: {change_pct:+.2f}%\n"
                            f"–¶–µ–Ω–∞: ${price:,.2f}"
                        )
                        print(f"  üö® ALERT! {symbol} changed by {change_pct:+.2f}%")
                else:
                    print(f"  {symbol}: First check, storing price ${price:,.2f}")
                
                last_prices[cache_key] = price
                await asyncio.sleep(0.2)
            
            print(f"‚úÖ Alert check complete. Cached prices: {len(last_prices)}, Alerts: {len(alerts)}")
            
            if alerts:
                message = "üîî <b>–¶–µ–Ω–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã!</b>\n\n" + "\n\n".join(alerts)
                await context.bot.send_message(chat_id=CHAT_ID, text=message, parse_mode='HTML')
                print("üì§ Alerts sent to user")
    
    except Exception as e:
        print(f"‚ùå check_price_alerts error: {e}")
        traceback.print_exc()

async def daily_report(context: ContextTypes.DEFAULT_TYPE):
    """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç"""
    if not CHAT_ID:
        return
    
    try:
        from datetime import datetime
        now = datetime.now().strftime("%d.%m.%Y")
        
        lines = [f"üåÖ <b>–£—Ç—Ä–µ–Ω–Ω–∏–π –æ—Ç—á—ë—Ç ({now})</b>\n"]
        
        async with aiohttp.ClientSession() as session:
            lines.append("<b>üìä –§–æ–Ω–¥–æ–≤—ã–π —Ä—ã–Ω–æ–∫:</b>")
            for ticker, info in AVAILABLE_TICKERS.items():
                price_data = await get_yahoo_price(session, ticker)
                if price_data:
                    price, cur = price_data
                    lines.append(f"‚Ä¢ {info['name']}: {price:.2f} {cur}")
                await asyncio.sleep(0.3)
            
            lines.append("\n<b>‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:</b>")
            for symbol, info in CRYPTO_IDS.items():
                crypto_data = await get_crypto_price(session, symbol)
                if crypto_data:
                    price = crypto_data["usd"]
                    chg = crypto_data.get("change_24h")
                    if chg:
                        lines.append(f"‚Ä¢ {symbol}: ${price:,.2f} ({chg:+.2f}%)")
                    else:
                        lines.append(f"‚Ä¢ {symbol}: ${price:,.2f}")
                await asyncio.sleep(0.2)
        
        await context.bot.send_message(chat_id=CHAT_ID, text="\n".join(lines), parse_mode='HTML')
    
    except Exception as e:
        print(f"‚ùå daily_report error: {e}")

async def weekly_report(context: ContextTypes.DEFAULT_TYPE):
    """–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç —Å —Ü–µ–Ω–∞–º–∏ –∏ —Å–æ–±—ã—Ç–∏—è–º–∏"""
    if not CHAT_ID:
        return
    
    try:
        lines = ["üìÜ <b>–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç</b>\n"]
        
        async with aiohttp.ClientSession() as session:
            # –¶–µ–Ω—ã
            lines.append("<b>üìä –§–æ–Ω–¥–æ–≤—ã–π —Ä—ã–Ω–æ–∫:</b>")
            for ticker, info in AVAILABLE_TICKERS.items():
                price_data = await get_yahoo_price(session, ticker)
                if price_data:
                    price, cur = price_data
                    lines.append(f"‚Ä¢ {info['name']}: {price:.2f} {cur}")
                await asyncio.sleep(0.3)
            
            lines.append("\n<b>‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:</b>")
            for symbol, info in CRYPTO_IDS.items():
                crypto_data = await get_crypto_price(session, symbol)
                if crypto_data:
                    price = crypto_data["usd"]
                    chg = crypto_data.get("change_24h")
                    if chg:
                        lines.append(f"‚Ä¢ {symbol}: ${price:,.2f} ({chg:+.2f}%)")
                    else:
                        lines.append(f"‚Ä¢ {symbol}: ${price:,.2f}")
                await asyncio.sleep(0.2)
            
            # –°–æ–±—ã—Ç–∏—è –Ω–µ–¥–µ–ª–∏
            lines.append("\n\nüìÖ <b>–°–æ–±—ã—Ç–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é:</b>")
            
            stock_events = await get_stock_events(session)
            crypto_events = await get_crypto_events(session)
            
            if stock_events or crypto_events:
                lines.append("<pre>")
                lines.append("–î–∞—Ç–∞  –ê–∫—Ç–∏–≤   –°–æ–±—ã—Ç–∏—è")
                lines.append("‚îÄ" * 40)
                
                all_events = stock_events + crypto_events
                all_events.sort(key=lambda x: x.get("date", ""))
                
                for event in all_events[:8]:
                    date = event.get("date", "")[:5]
                    asset = event.get("asset", "")[:7].ljust(7)
                    title = event.get("title", "")[:30]
                    impact = event.get("impact", "")
                    pred = event.get("prediction", "")
                    
                    lines.append(f"{date} {asset} {title}")
                    if impact:
                        lines.append(f"       {impact} | {pred}")
                
                lines.append("</pre>")
            else:
                lines.append("<i>–°–æ–±—ã—Ç–∏—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è –≤—Ä—É—á–Ω—É—é</i>")
        
        await context.bot.send_message(chat_id=CHAT_ID, text="\n".join(lines), parse_mode='HTML')
    
    except Exception as e:
        print(f"‚ùå weekly_report error: {e}")
        traceback.print_exc()

# ----------------- BOT handlers -----------------
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã <b>–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è</b>\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è üëá",
        parse_mode='HTML',
        reply_markup=get_main_menu()
    )

async def cmd_portfolio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    portfolio = get_user_portfolio(user_id)
    
    if not portfolio or all(v == 0 for v in portfolio.values()):
        await update.message.reply_text(
            "üíº –í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É <b>‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤</b> –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–æ–≤.",
            parse_mode='HTML'
        )
        return
    
    try:
        lines = ["üíº <b>–í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å:</b>\n"]
        total_value_usd = 0
        
        async with aiohttp.ClientSession() as session:
            # –ê–∫—Ü–∏–∏/ETF
            stock_items = [(k, v) for k, v in portfolio.items() if k in AVAILABLE_TICKERS]
            if stock_items and any(v > 0 for k, v in stock_items):
                lines.append("<b>üìä –ê–∫—Ü–∏–∏/ETF:</b>")
                lines.append("<pre>")
                lines.append("–ê–∫—Ç–∏–≤          –ö–æ–ª-–≤–æ    –¶–µ–Ω–∞        –°—É–º–º–∞")
                lines.append("‚îÄ" * 50)
                
                for ticker, quantity in stock_items:
                    if quantity == 0:
                        continue
                    price_data = await get_yahoo_price(session, ticker)
                    if price_data:
                        price, cur = price_data
                        value = price * quantity
                        
                        name = AVAILABLE_TICKERS[ticker]['name'][:14].ljust(14)
                        qty_str = f"{quantity:.2f}".rjust(8)
                        price_str = f"{price:.2f}".rjust(8)
                        value_str = f"{value:.2f} {cur}".rjust(12)
                        
                        lines.append(f"{name} {qty_str} {price_str} {value_str}")
                        
                        if cur == "USD":
                            total_value_usd += value
                        elif cur == "EUR":
                            total_value_usd += value * 1.1
                    await asyncio.sleep(0.3)
                
                lines.append("</pre>")
            
            # –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
            crypto_items = [(k, v) for k, v in portfolio.items() if k in CRYPTO_IDS]
            if crypto_items and any(v > 0 for k, v in crypto_items):
                lines.append("\n<b>‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:</b>")
                lines.append("<pre>")
                lines.append("–ú–æ–Ω–µ—Ç–∞    –ö–æ–ª-–≤–æ      –¶–µ–Ω–∞          –°—É–º–º–∞")
                lines.append("‚îÄ" * 50)
                
                for symbol, quantity in crypto_items:
                    if quantity == 0:
                        continue
                    crypto_data = await get_crypto_price(session, symbol)
                    if crypto_data:
                        price = crypto_data["usd"]
                        chg = crypto_data.get("change_24h")
                        value = price * quantity
                        total_value_usd += value
                        
                        sym_str = symbol.ljust(9)
                        qty_str = f"{quantity:.4f}".rjust(10)
                        price_str = f"${price:,.2f}".rjust(12)
                        value_str = f"${value:,.2f}".rjust(12)
                        
                        chg_emoji = "üìà" if chg and chg >= 0 else "üìâ" if chg else ""
                        lines.append(f"{sym_str} {qty_str} {price_str} {value_str} {chg_emoji}")
                    await asyncio.sleep(0.2)
                
                lines.append("</pre>")
        
        if total_value_usd > 0:
            lines.append(f"\n<b>üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ~${total_value_usd:,.2f}</b>")
        
        await update.message.reply_text("\n".join(lines), parse_mode='HTML')
    
    except Exception as e:
        print(f"‚ùå portfolio error: {e}")
        traceback.print_exc()
        await update.message.reply_text("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")

async def cmd_all_prices(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–µ–Ω—ã"""
    try:
        from datetime import datetime
        import pytz
        
        # –í—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö (–†–∏–≥–∞)
        riga_tz = pytz.timezone('Europe/Riga')
        now = datetime.now(riga_tz)
        timestamp = now.strftime("%H:%M:%S %d.%m.%Y")
        
        lines = [
            f"üíπ <b>–í—Å–µ —Ü–µ–Ω—ã</b>\n",
            f"üïê –î–∞–Ω–Ω—ã–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã –Ω–∞: <b>{timestamp}</b> (–†–∏–≥–∞)\n"
        ]
        
        async with aiohttp.ClientSession() as session:
            # –ê–∫—Ü–∏–∏/ETF –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã
            lines.append("<b>üìä –§–æ–Ω–¥–æ–≤—ã–π —Ä—ã–Ω–æ–∫:</b>")
            lines.append("<pre>")
            lines.append("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê")
            lines.append("‚îÇ –ê–∫—Ç–∏–≤            ‚îÇ –¶–µ–Ω–∞       ‚îÇ 24h     ‚îÇ")
            lines.append("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§")
            
            stock_source = "Yahoo Finance"
            for ticker, info in AVAILABLE_TICKERS.items():
                price_data = await get_yahoo_price(session, ticker)
                if price_data:
                    price, cur, change_pct = price_data
                    name = info['name'][:16].ljust(16)
                    price_str = f"{price:.2f} {cur}".ljust(10)
                    
                    if change_pct != 0:
                        chg_emoji = "‚Üó" if change_pct >= 0 else "‚Üò"
                        chg_str = f"{chg_emoji}{abs(change_pct):.1f}%".rjust(7)
                    else:
                        chg_str = "0.0%".rjust(7)
                    
                    lines.append(f"‚îÇ {name} ‚îÇ {price_str} ‚îÇ {chg_str} ‚îÇ")
                else:
                    name = info['name'][:16].ljust(16)
                    lines.append(f"‚îÇ {name} ‚îÇ {'–Ω/–¥'.ljust(10)} ‚îÇ {'N/A'.rjust(7)} ‚îÇ")
                await asyncio.sleep(0.3)
            
            lines.append("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò")
            lines.append(f"–ò—Å—Ç–æ—á–Ω–∏–∫: {stock_source}")
            lines.append("</pre>")
            
            # –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –≤ –≤–∏–¥–µ —Ç–∞–±–ª–∏—Ü—ã
            lines.append("\n<b>‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:</b>")
            lines.append("<pre>")
            lines.append("‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê")
            lines.append("‚îÇ –ú–æ–Ω–µ—Ç–∞ ‚îÇ –¶–µ–Ω–∞         ‚îÇ 24h     ‚îÇ")
            lines.append("‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§")
            
            crypto_sources = {}
            for symbol, info in CRYPTO_IDS.items():
                try:
                    crypto_data = await get_crypto_price(session, symbol)
                    if crypto_data:
                        price = crypto_data["usd"]
                        chg = crypto_data.get("change_24h")
                        source = crypto_data.get("source", "Unknown")
                        
                        crypto_sources[symbol] = source
                        
                        sym_str = symbol.ljust(6)
                        price_str = f"${price:,.2f}".ljust(12)
                        
                        if chg and not math.isnan(chg):
                            chg_emoji = "‚Üó" if chg >= 0 else "‚Üò"
                            chg_str = f"{chg_emoji}{abs(chg):.1f}%".rjust(7)
                        else:
                            chg_str = "N/A".rjust(7)
                        
                        lines.append(f"‚îÇ {sym_str} ‚îÇ {price_str} ‚îÇ {chg_str} ‚îÇ")
                    else:
                        sym_str = symbol.ljust(6)
                        lines.append(f"‚îÇ {sym_str} ‚îÇ {'–Ω/–¥'.ljust(12)} ‚îÇ {'N/A'.rjust(7)} ‚îÇ")
                except Exception as e:
                    print(f"‚ùå {symbol} price error: {e}")
                    sym_str = symbol.ljust(6)
                    lines.append(f"‚îÇ {sym_str} ‚îÇ {'–æ—à–∏–±–∫–∞'.ljust(12)} ‚îÇ {'N/A'.rjust(7)} ‚îÇ")
                
                await asyncio.sleep(0.3)
            
            lines.append("‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –∫—Ä–∏–ø—Ç—ã
            if crypto_sources:
                unique_sources = set(crypto_sources.values())
                sources_str = ", ".join(unique_sources)
                lines.append(f"–ò—Å—Ç–æ—á–Ω–∏–∫–∏: {sources_str}")
            
            lines.append("</pre>")
        
        await update.message.reply_text("\n".join(lines), parse_mode='HTML')
    
    except Exception as e:
        print(f"‚ùå all_prices error: {e}")
        traceback.print_exc()
        await update.message.reply_text("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")

async def cmd_add_asset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å"""
    await update.message.reply_text(
        "‚ûï <b>–î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤</b>\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "<code>/add TICKER –ö–û–õ–ò–ß–ï–°–¢–í–û</code>\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
        "<code>/add VWCE.DE 10</code> - 10 –∞–∫—Ü–∏–π VWCE\n"
        "<code>/add BTC 0.5</code> - 0.5 BTC\n"
        "<code>/add ETH 2</code> - 2 ETH\n\n"
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã:</b>\n"
        "‚Ä¢ VWCE.DE, 4GLD.DE, DE000A2T5DZ1.SG, SPY\n"
        "‚Ä¢ BTC, ETH, SOL, AVAX, DOGE, LINK",
        parse_mode='HTML'
    )

async def cmd_add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ /add TICKER QUANTITY"""
    if len(context.args) != 2:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/add TICKER –ö–û–õ–ò–ß–ï–°–¢–í–û</code>",
            parse_mode='HTML'
        )
        return
    
    ticker = context.args[0].upper()
    try:
        quantity = float(context.args[1])
        if quantity <= 0:
            raise ValueError()
    except ValueError:
        await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∏–∫–µ—Ä–∞
    if ticker not in AVAILABLE_TICKERS and ticker not in CRYPTO_IDS:
        await update.message.reply_text(
            f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–∫–µ—Ä: {ticker}\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã: VWCE.DE, 4GLD.DE, DE000A2T5DZ1.SG, SPY, BTC, ETH, SOL, AVAX, DOGE, LINK"
        )
        return
    
    user_id = update.effective_user.id
    portfolio = get_user_portfolio(user_id)
    portfolio[ticker] = portfolio.get(ticker, 0) + quantity
    save_portfolio(user_id, portfolio)
    
    name = AVAILABLE_TICKERS.get(ticker, {}).get("name") or CRYPTO_IDS.get(ticker, {}).get("name") or ticker
    await update.message.reply_text(
        f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: <b>{quantity} {name}</b>\n"
        f"–¢–µ–ø–µ—Ä—å —É –≤–∞—Å: {portfolio[ticker]:.4f}",
        parse_mode='HTML'
    )

async def cmd_remove_asset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤ –∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
    user_id = update.effective_user.id
    portfolio = get_user_portfolio(user_id)
    
    if not portfolio or all(v == 0 for v in portfolio.values()):
        await update.message.reply_text("üíº –í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç!")
        return
    
    assets = [f"‚Ä¢ <code>/remove {k}</code> - {v:.4f}" for k, v in portfolio.items() if v > 0]
    await update.message.reply_text(
        "‚ûñ <b>–£–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤</b>\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "<code>/remove TICKER</code>\n\n"
        "<b>–í–∞—à–∏ –∞–∫—Ç–∏–≤—ã:</b>\n" + "\n".join(assets),
        parse_mode='HTML'
    )

async def cmd_remove(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ /remove TICKER"""
    if len(context.args) != 1:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/remove TICKER</code>", parse_mode='HTML')
        return
    
    ticker = context.args[0].upper()
    user_id = update.effective_user.id
    portfolio = get_user_portfolio(user_id)
    
    if ticker not in portfolio or portfolio[ticker] == 0:
        await update.message.reply_text(f"‚ùå {ticker} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª–µ")
        return
    
    portfolio[ticker] = 0
    save_portfolio(user_id, portfolio)
    await update.message.reply_text(f"‚úÖ {ticker} —É–¥–∞–ª—ë–Ω –∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è")

async def cmd_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤"""
    message = (
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤:</b>\n\n"
        f"<b>–§–æ–Ω–¥–æ–≤—ã–π —Ä—ã–Ω–æ–∫:</b> ¬±{THRESHOLDS['stocks']}%\n"
        f"<b>–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:</b> ¬±{THRESHOLDS['crypto']}%\n\n"
        "<b>üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</b>\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞: –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç\n"
        "‚Ä¢ –£—Ç—Ä–µ–Ω–Ω–∏–π –æ—Ç—á—ë—Ç: 11:00 (–†–∏–≥–∞)\n"
        "‚Ä¢ –ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç: –í—Å 19:00 (–†–∏–≥–∞)\n\n"
        f"üíæ –í –∫—ç—à–µ: {len(last_prices)} —Ü–µ–Ω\n\n"
        "–ò–∑–º–µ–Ω–∏—Ç—å: <code>/setalert stocks 2</code>\n"
        "–¢–µ—Å—Ç: <code>/testalert</code>"
    )
    await update.message.reply_text(message, parse_mode='HTML')

async def cmd_test_alert(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤"""
    await update.message.reply_text("üîÑ –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –∞–ª–µ—Ä—Ç–æ–≤...")
    await check_price_alerts(context)
    await update.message.reply_text(
        f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"üíæ –í –∫—ç—à–µ: {len(last_prices)} —Ü–µ–Ω\n\n"
        f"–°–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥–∏ Render –¥–ª—è –¥–µ—Ç–∞–ª–µ–π."
    )

async def cmd_setalert(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä–æ–≥–∏ –∞–ª–µ—Ä—Ç–æ–≤"""
    if not context.args or len(context.args) != 2:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/setalert [stocks|crypto] [–ø—Ä–æ—Ü–µ–Ω—Ç]</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "<code>/setalert stocks 2</code> ‚Äî –∞–ª–µ—Ä—Ç—ã –¥–ª—è –∞–∫—Ü–∏–π –ø—Ä–∏ ¬±2%\n"
            "<code>/setalert crypto 5</code> ‚Äî –∞–ª–µ—Ä—Ç—ã –¥–ª—è –∫—Ä–∏–ø—Ç—ã –ø—Ä–∏ ¬±5%",
            parse_mode='HTML'
        )
        return
    
    asset_type = context.args[0].lower()
    try:
        threshold = float(context.args[1])
        if threshold <= 0:
            raise ValueError()
    except ValueError:
        await update.message.reply_text("‚ùå –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        return
    
    if asset_type not in ["stocks", "crypto"]:
        await update.message.reply_text("‚ùå –¢–∏–ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'stocks' –∏–ª–∏ 'crypto'")
        return
    
    THRESHOLDS[asset_type] = threshold
    name = "–∞–∫—Ü–∏–π/ETF" if asset_type == "stocks" else "–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"
    await update.message.reply_text(
        f"‚úÖ –ü–æ—Ä–æ–≥ –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è {name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ¬±{threshold}%",
        parse_mode='HTML'
    )

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–º–æ—â—å"""
    message = (
        "‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:</b>\n\n"
        "<b>–ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é:</b>\n"
        "üíº <b>–ú–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å</b> - –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –∞–∫—Ç–∏–≤—ã\n"
        "üíπ <b>–í—Å–µ —Ü–µ–Ω—ã</b> - –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏\n"
        "üì∞ <b>–°–æ–±—ã—Ç–∏—è –Ω–µ–¥–µ–ª–∏</b> - –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è\n"
        "üìä <b>–ü—Ä–æ–≥–Ω–æ–∑—ã</b> - –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –ø—Ä–æ–≥–Ω–æ–∑—ã\n"
        "‚ûï <b>–î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤</b> - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è\n"
        "‚ûñ <b>–£–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤</b> - —É–±—Ä–∞—Ç—å –∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "<code>/add TICKER –ö–û–õ-–í–û</code> - –¥–æ–±–∞–≤–∏—Ç—å\n"
        "<code>/remove TICKER</code> - —É–¥–∞–ª–∏—Ç—å\n"
        "<code>/events</code> - —Å–æ–±—ã—Ç–∏—è –Ω–µ–¥–µ–ª–∏\n"
        "<code>/setalert stocks 2</code> - –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä–æ–≥–∏"
    )
    await update.message.reply_text(message, parse_mode='HTML')

async def cmd_events(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–±—ã—Ç–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é"""
    try:
        await update.message.reply_text("üîÑ –ü–æ–ª—É—á–∞—é —Å–æ–±—ã—Ç–∏—è –Ω–µ–¥–µ–ª–∏...")
        
        lines = ["üìÖ <b>–°–æ–±—ã—Ç–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é</b>\n"]
        
        async with aiohttp.ClientSession() as session:
            try:
                stock_events = await get_stock_events(session)
            except Exception as e:
                print(f"‚ùå Stock events error: {e}")
                traceback.print_exc()
                stock_events = []
            
            try:
                crypto_events = await get_crypto_events(session)
            except Exception as e:
                print(f"‚ùå Crypto events error: {e}")
                traceback.print_exc()
                crypto_events = []
            
            # –ê–∫—Ü–∏–∏/ETF
            if stock_events:
                lines.append("<b>üìä –§–æ–Ω–¥–æ–≤—ã–π —Ä—ã–Ω–æ–∫:</b>")
                for event in stock_events:
                    date = event.get("date", "")
                    asset = event.get("asset", "")
                    title = event.get("title", "")
                    impact = event.get("impact", "")
                    pred = event.get("prediction", "")
                    prob = event.get("probability", 50)
                    price_change = event.get("price_change", "")
                    recommendation = event.get("recommendation", "üü° –î–ï–†–ñ–ê–¢–¨")
                    
                    lines.append(f"\nüìÖ <b>{date}</b> | {asset}")
                    lines.append(f"üìå {title}")
                    lines.append(f"üéØ –í–ª–∏—è–Ω–∏–µ: {impact}")
                    lines.append(f"üí° –ü—Ä–æ–≥–Ω–æ–∑: {pred}")
                    lines.append(f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {price_change}")
                    lines.append(f"üí∞ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: <b>{recommendation}</b>")
                    lines.append(f"üîÆ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: —Å—Ä–µ–¥–Ω—è—è ({prob:.0f}/100)")
                    lines.append("")
                    lines.append(f"<i>–ê–Ω–∞–ª–∏–∑: –º–∞–∫—Ä–æ—ç–∫–æ–Ω–æ–º–∏–∫–∞, –∏—Å—Ç–æ—Ä–∏—è</i>")
            
            # –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
            if crypto_events:
                lines.append("\n\n<b>‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:</b>")
                for event in crypto_events:
                    date = event.get("date", "")
                    asset = event.get("asset", "")
                    title = event.get("title", "")
                    impact = event.get("impact", "")
                    pred = event.get("prediction", "")
                    prob = event.get("probability", 50)
                    price_change = event.get("price_change", "")
                    confidence = event.get("confidence", "—Å—Ä–µ–¥–Ω—è—è")
                    recommendation = event.get("recommendation", "üü° –î–ï–†–ñ–ê–¢–¨")
                    
                    lines.append(f"\nüìÖ <b>{date}</b> | {asset}")
                    lines.append(f"üìå {title}")
                    lines.append(f"üéØ –í–ª–∏—è–Ω–∏–µ: {impact}")
                    lines.append(f"üí° –ü—Ä–æ–≥–Ω–æ–∑: {pred}")
                    lines.append(f"üìä –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {price_change}")
                    lines.append(f"üí∞ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: <b>{recommendation}</b>")
                    lines.append(f"üîÆ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence} ({prob:.0f}/100)")
                    lines.append("")
                    lines.append(f"<i>–ê–Ω–∞–ª–∏–∑: —Ä—ã–Ω–æ–∫, —Ç—Ä–µ–Ω–¥, —Å–æ—Ü.—Å–µ—Ç–∏</i>")
            
            if not stock_events and not crypto_events:
                lines.append("<i>–ù–µ—Ç –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –Ω–∞ —ç—Ç—É –Ω–µ–¥–µ–ª—é</i>")
        
        await update.message.reply_text("\n".join(lines), parse_mode='HTML')
    
    except Exception as e:
        print(f"‚ùå cmd_events error: {e}")
        traceback.print_exc()
        await update.message.reply_text(
            f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –Ω–∞ Render"
        )

async def cmd_forecast(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ —Ä–∞—Å—á—ë—Ç–∞–º–∏"""
    try:
        await update.message.reply_text("üîÑ –†–∞—Å—Å—á–∏—Ç—ã–≤–∞—é –ø—Ä–æ–≥–Ω–æ–∑—ã...")
        
        lines = ["üìä <b>–ü—Ä–æ–≥–Ω–æ–∑—ã –Ω–∞ –Ω–µ–¥–µ–ª—é</b>\n"]
        lines.append("<i>–ù–∞ –æ—Å–Ω–æ–≤–µ sentiment analysis, —Ç—Ä–µ–Ω–¥–æ–≤ –∏ Fear & Greed Index</i>\n")
        
        async with aiohttp.ClientSession() as session:
            # –ü–æ–ª—É—á–∞–µ–º Fear & Greed Index
            fear_greed = await get_fear_greed_index(session)
            if fear_greed:
                fg_text = "–ñ–∞–¥–Ω–æ—Å—Ç—å üü¢" if fear_greed > 60 else "–°—Ç—Ä–∞—Ö üî¥" if fear_greed < 40 else "–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ üü°"
                lines.append(f"<b>–ò–Ω–¥–µ–∫—Å —Ä—ã–Ω–∫–∞:</b> {fear_greed}/100 ({fg_text})\n")
            
            # –ü—Ä–æ–≥–Ω–æ–∑—ã –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
            lines.append("<b>‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:</b>")
            lines.append("<pre>")
            
            for symbol in ["BTC", "ETH", "SOL", "AVAX"]:
                prob_data = await calculate_probability(session, symbol, "–°—Ä–µ–¥–Ω–∏–π")
                
                sym_str = symbol.ljust(5)
                prob = prob_data["probability"]
                change = prob_data["price_change"]
                
                emoji = "üìà" if prob >= 55 else "üìâ" if prob <= 45 else "üìä"
                lines.append(f"{emoji} {sym_str} {prob:.0f}%  {change}")
                
                await asyncio.sleep(0.5)
            
            lines.append("</pre>")
            
            lines.append("\n<b>–§–∞–∫—Ç–æ—Ä—ã –∞–Ω–∞–ª–∏–∑–∞:</b>")
            lines.append("‚Ä¢ –°–æ—Ü–∏–∞–ª—å–Ω—ã–π sentiment (LunarCrush)")
            lines.append("‚Ä¢ –¢—Ä–µ–Ω–¥ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 7 –¥–Ω–µ–π")
            lines.append("‚Ä¢ Fear & Greed Index")
            lines.append("‚Ä¢ –í–ª–∏—è–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö —Å–æ–±—ã—Ç–∏–π")
            
            lines.append("\n<i>‚ö†Ô∏è –ù–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–µ–π</i>")
        
        await update.message.reply_text("\n".join(lines), parse_mode='HTML')
    
    except Exception as e:
        print(f"‚ùå forecast error: {e}")
        traceback.print_exc()
        await update.message.reply_text("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")

async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é"""
    text = update.message.text
    
    if text == "üíº –ú–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å":
        await cmd_portfolio(update, context)
    elif text == "üíπ –í—Å–µ —Ü–µ–Ω—ã":
        await cmd_all_prices(update, context)
    elif text == "üì∞ –°–æ–±—ã—Ç–∏—è –Ω–µ–¥–µ–ª–∏":
        await cmd_events(update, context)
    elif text == "üìä –ü—Ä–æ–≥–Ω–æ–∑—ã":
        await cmd_forecast(update, context)
    elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤":
        await cmd_add_asset(update, context)
    elif text == "‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤":
        await cmd_remove_asset(update, context)
    elif text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤":
        await cmd_alerts(update, context)
    elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        await cmd_help(update, context)
    else:
        await update.message.reply_text("–Ø —Ç–µ–±—è —Å–ª—ã—à—É üëÇ")

async def on_error(update: object, context: ContextTypes.DEFAULT_TYPE):
    print("‚ùå Global error:", context.error)
    traceback.print_exc()

def main():
    # –ü—Ä–æ—Å—Ç–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–ª—è –≤–µ—Ä—Å–∏–∏ 21.7
    app = Application.builder().token(TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("add", cmd_add))
    app.add_handler(CommandHandler("remove", cmd_remove))
    app.add_handler(CommandHandler("setalert", cmd_setalert))
    app.add_handler(CommandHandler("testalert", cmd_test_alert))
    app.add_handler(CommandHandler("events", cmd_events))
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_buttons))
    app.add_error_handler(on_error)

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    job_queue = app.job_queue
    
    if job_queue and CHAT_ID:
        job_queue.run_repeating(check_price_alerts, interval=600, first=60)
        job_queue.run_daily(daily_report, time=dt_time(hour=11, minute=0), days=(0,1,2,3,4,5,6))
        job_queue.run_daily(weekly_report, time=dt_time(hour=19, minute=0), days=(6,))
        print("üöÄ Bot running with monitoring enabled")
    else:
        print("üöÄ Bot running (monitoring disabled - set CHAT_ID to enable)")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º polling —Å –æ—Ç–º–µ–Ω–æ–π —Å—Ç–∞—Ä—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    print("üîÑ Starting polling...")
    try:
        app.run_polling(
            drop_pending_updates=True,
            close_loop=False,
            stop_signals=None,  # –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤
            allowed_updates=Update.ALL_TYPES
        )
    except Exception as e:
        print(f"‚ùå Polling stopped: {e}")
        import sys
        sys.exit(0)

if __name__ == "__main__":
    main()
