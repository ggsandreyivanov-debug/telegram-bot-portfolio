import os
import math
import traceback
import aiohttp
from typing import Dict, Any, Optional, Tuple, List
from datetime import time as dt_time

from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# === ENV ===
TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")  # –≤–∞—à chat_id –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
if not TOKEN:
    raise RuntimeError("‚ö† BOT_TOKEN is not set in environment!")
if not CHAT_ID:
    print("‚ö† CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–∫–ª—é—á–µ–Ω—ã")

# === CONFIG ===
HEADERS = {"User-Agent": "Mozilla/5.0 (compatible; AndreyBot/1.0; +https://t.me/)"}
TIMEOUT = aiohttp.ClientTimeout(total=10)

# –¢–∏–∫–µ—Ä—ã –Ω–∞ Yahoo Finance
YF_TICKERS = {
    "VWCE": "VWCE.DE",
    "GOLD": "4GLD.DE",
    "SP500": "SPY",
}

# –ö—Ä–∏–ø—Ç–∞: CoinGecko id + Binance-—Å–∏–º–≤–æ–ª—ã (–¥–ª—è —Ñ–æ–ª–±—ç–∫–∞)
COINS = {
    "BTC": ("bitcoin", "BTCUSDT"),
    "ETH": ("ethereum", "ETHUSDT"),
    "SOL": ("solana", "SOLUSDT"),
    "AVAX": ("avalanche-2", "AVAXUSDT"),
    "DOGE": ("dogecoin", "DOGEUSDT"),
    "LINK": ("chainlink", "LINKUSDT"),
}

# –ü–æ—Ä–æ–≥–∏ –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤ (–º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å —á–µ—Ä–µ–∑ /setalert)
THRESHOLDS = {
    "stocks": 1.0,   # ¬±1% –¥–ª—è –∞–∫—Ü–∏–π/ETF
    "crypto": 4.0,   # ¬±4% –¥–ª—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ü–µ–Ω –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤
last_prices: Dict[str, float] = {}

# ----------------- HTTP helpers -----------------
async def get_json(session: aiohttp.ClientSession, url: str, params=None) -> Optional[Dict[str, Any]]:
    try:
        async with session.get(url, params=params, headers=HEADERS, timeout=TIMEOUT) as r:
            if r.status != 200:
                print(f"‚ö† {url} -> HTTP {r.status}")
                return None
            return await r.json()
    except Exception as e:
        print(f"‚ö† get_json({url}) error: {e}")
        return None

# ----------------- PRICES: Yahoo Finance -----------------
async def get_yahoo_prices(session: aiohttp.ClientSession) -> Dict[str, Tuple[Optional[float], Optional[str]]]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç { 'VWCE': (price, currency), 'GOLD': (price, currency), 'SP500': (price, currency) }
    """
    symbols = ",".join(YF_TICKERS.values())
    url = "https://query1.finance.yahoo.com/v7/finance/quote"
    data = await get_json(session, url, {"symbols": symbols})
    out: Dict[str, Tuple[Optional[float], Optional[str]]] = {k: (None, None) for k in YF_TICKERS}

    try:
        res = (data or {}).get("quoteResponse", {}).get("result", [])
        by_symbol = {it.get("symbol"): it for it in res}
        for k, sym in YF_TICKERS.items():
            item = by_symbol.get(sym)
            if item:
                price = item.get("regularMarketPrice")
                cur = item.get("currency")
                out[k] = (float(price) if price is not None else None, cur)
    except Exception as e:
        print("‚ö† parse_yahoo error:", e, traceback.format_exc())
    return out

# ----------------- PRICES: CoinGecko + fallback Binance -----------------
async def get_coingecko(session: aiohttp.ClientSession) -> Dict[str, Dict[str, Optional[float]]]:
    ids = ",".join(v[0] for v in COINS.values())
    url = "https://api.coingecko.com/api/v3/simple/price"
    params = {"ids": ids, "vs_currencies": "usd", "include_24hr_change": "true"}
    data = await get_json(session, url, params)
    out: Dict[str, Dict[str, Optional[float]]] = {}
    if not data:
        return out

    # map id->sym
    id_to_sym = {v[0]: k for k, v in COINS.items()}
    for cg_id, payload in data.items():
        sym = id_to_sym.get(cg_id)
        if not sym:
            continue
        price = payload.get("usd")
        chg = payload.get("usd_24h_change")
        out[sym] = {"usd": float(price) if price is not None else None,
                    "change_24h": float(chg) if chg is not None else None}
    return out

async def get_binance_price(session: aiohttp.ClientSession, symbol: str) -> Optional[float]:
    url = "https://api.binance.com/api/v3/ticker/price"
    data = await get_json(session, url, {"symbol": symbol})
    try:
        if data and "price" in data:
            return float(data["price"])
    except Exception as e:
        print(f"‚ö† parse_binance {symbol} error:", e)
    return None

async def get_crypto_prices(session: aiohttp.ClientSession) -> Dict[str, Dict[str, Optional[float]]]:
    """
    –ü—ã—Ç–∞–µ–º—Å—è —á–µ—Ä–µ–∑ CoinGecko; —á—Ç–æ –Ω–µ –ø—Ä–∏—à–ª–æ ‚Äî –¥–æ—Ç—è–≥–∏–≤–∞–µ–º —Ü–µ–Ω–æ–π —Å Binance (–±–µ–∑ % –∏–∑–º–µ–Ω–µ–Ω–∏—è).
    """
    base = await get_coingecko(session)
    # fallback –¥–ª—è –ø—É—Å—Ç—ã—Ö
    tasks: List[Tuple[str, str]] = []
    for sym, (_, bin_sym) in COINS.items():
        if sym not in base or base[sym].get("usd") is None:
            tasks.append((sym, bin_sym))

    for sym, bin_sym in tasks:
        price = await get_binance_price(session, bin_sym)
        if price is not None:
            base.setdefault(sym, {})["usd"] = price
            base[sym].setdefault("change_24h", None)

    return base

# ----------------- MONITORING LOGIC -----------------
async def check_price_alerts(context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤"""
    if not CHAT_ID:
        return
    
    try:
        async with aiohttp.ClientSession() as session:
            yf = await get_yahoo_prices(session)
            crypto = await get_crypto_prices(session)
        
        alerts = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ü–∏–∏/ETF
        for key, (price, currency) in yf.items():
            if price is None:
                continue
            
            cache_key = f"stock_{key}"
            if cache_key in last_prices:
                old_price = last_prices[cache_key]
                change_pct = ((price - old_price) / old_price) * 100
                
                if abs(change_pct) >= THRESHOLDS["stocks"]:
                    emoji = "üìà" if change_pct > 0 else "üìâ"
                    alerts.append(
                        f"{emoji} <b>{key}</b>: {change_pct:+.2f}%\n"
                        f"–¶–µ–Ω–∞: {price:.2f} {currency or ''}"
                    )
            
            last_prices[cache_key] = price
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        for sym, data in crypto.items():
            price = data.get("usd")
            if price is None:
                continue
            
            cache_key = f"crypto_{sym}"
            if cache_key in last_prices:
                old_price = last_prices[cache_key]
                change_pct = ((price - old_price) / old_price) * 100
                
                if abs(change_pct) >= THRESHOLDS["crypto"]:
                    emoji = "üöÄ" if change_pct > 0 else "‚ö†Ô∏è"
                    alerts.append(
                        f"{emoji} <b>{sym}</b>: {change_pct:+.2f}%\n"
                        f"–¶–µ–Ω–∞: ${price:,.2f}"
                    )
            
            last_prices[cache_key] = price
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç—ã
        if alerts:
            message = "üîî <b>–¶–µ–Ω–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã!</b>\n\n" + "\n\n".join(alerts)
            await context.bot.send_message(
                chat_id=CHAT_ID,
                text=message,
                parse_mode='HTML'
            )
    
    except Exception as e:
        print(f"‚ùå check_price_alerts error: {e}", traceback.format_exc())

async def daily_report(context: ContextTypes.DEFAULT_TYPE):
    """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç –≤ 11:00 –ø–æ –†–∏–≥–µ"""
    if not CHAT_ID:
        return
    
    try:
        async with aiohttp.ClientSession() as session:
            yf = await get_yahoo_prices(session)
            crypto = await get_crypto_prices(session)
        
        from datetime import datetime
        now = datetime.now().strftime("%d.%m.%Y")
        
        lines = [f"üåÖ <b>–£—Ç—Ä–µ–Ω–Ω–∏–µ —Ü–µ–Ω—ã ({now})</b>\n"]
        
        # –ê–∫—Ü–∏–∏/ETF
        lines.append("<b>üìä –§–æ–Ω–¥–æ–≤—ã–π —Ä—ã–Ω–æ–∫:</b>")
        for key in ["VWCE", "GOLD", "SP500"]:
            price, currency = yf.get(key, (None, None))
            if price:
                lines.append(f"‚Ä¢ {key}: {price:.2f} {currency or ''}")
            else:
                lines.append(f"‚Ä¢ {key}: –Ω/–¥")
        
        # –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        lines.append("\n<b>‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:</b>")
        for sym in ["BTC", "ETH", "SOL", "AVAX", "DOGE", "LINK"]:
            data = crypto.get(sym, {})
            price = data.get("usd")
            chg = data.get("change_24h")
            if price:
                if isinstance(chg, (int, float)) and not math.isnan(chg):
                    lines.append(f"‚Ä¢ {sym}: ${price:,.2f} ({chg:+.2f}%)")
                else:
                    lines.append(f"‚Ä¢ {sym}: ${price:,.2f}")
            else:
                lines.append(f"‚Ä¢ {sym}: –Ω/–¥")
        
        await context.bot.send_message(
            chat_id=CHAT_ID,
            text="\n".join(lines),
            parse_mode='HTML'
        )
    
    except Exception as e:
        print(f"‚ùå daily_report error: {e}", traceback.format_exc())

async def weekly_report(context: ContextTypes.DEFAULT_TYPE):
    """–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 19:00"""
    if not CHAT_ID:
        return
    
    try:
        async with aiohttp.ClientSession() as session:
            yf = await get_yahoo_prices(session)
            crypto = await get_crypto_prices(session)
        
        lines = ["üìÜ <b>–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç</b>\n"]
        
        # –ê–∫—Ü–∏–∏/ETF
        lines.append("<b>üìä –§–æ–Ω–¥–æ–≤—ã–π —Ä—ã–Ω–æ–∫:</b>")
        for key in ["VWCE", "GOLD", "SP500"]:
            price, currency = yf.get(key, (None, None))
            if price:
                lines.append(f"‚Ä¢ {key}: {price:.2f} {currency or ''}")
        
        # –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        lines.append("\n<b>‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:</b>")
        for sym in ["BTC", "ETH", "SOL", "AVAX", "DOGE", "LINK"]:
            data = crypto.get(sym, {})
            price = data.get("usd")
            chg = data.get("change_24h")
            if price:
                if isinstance(chg, (int, float)) and not math.isnan(chg):
                    lines.append(f"‚Ä¢ {sym}: ${price:,.2f} ({chg:+.2f}%)")
                else:
                    lines.append(f"‚Ä¢ {sym}: ${price:,.2f}")
        
        lines.append("\n<i>–°–æ–±—ã—Ç–∏—è –Ω–µ–¥–µ–ª–∏ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—é—Ç—Å—è –≤—Ä—É—á–Ω—É—é</i>")
        
        await context.bot.send_message(
            chat_id=CHAT_ID,
            text="\n".join(lines),
            parse_mode='HTML'
        )
    
    except Exception as e:
        print(f"‚ùå weekly_report error: {e}", traceback.format_exc())

# ----------------- BOT handlers -----------------
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã <b>–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è</b>\n\n"
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "/portfolio - –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã –ø–æ—Ä—Ç—Ñ–µ–ª—è\n"
        "/pingprices - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ü–µ–Ω—ã (–≤–∫–ª—é—á–∞—è SP500)\n"
        "/alerts - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤\n"
        "/setalert - –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä–æ–≥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
        "/status - –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞\n"
        "/help - –ø–æ–¥—Ä–æ–±–Ω–∞—è –ø–æ–º–æ—â—å\n\n"
        "üîî <b>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b>\n"
        "‚Ä¢ –ê–ª–µ—Ä—Ç—ã –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç\n"
        "‚Ä¢ –£—Ç—Ä–µ–Ω–Ω–∏–π –æ—Ç—á—ë—Ç –≤ 11:00 (–†–∏–≥–∞)\n"
        "‚Ä¢ –ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –≤ –í—Å 19:00 (–†–∏–≥–∞)",
        parse_mode='HTML'
    )

async def cmd_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    from datetime import datetime
    now = datetime.now().strftime("%H:%M:%S %d.%m.%Y")
    monitored = len(YF_TICKERS) + len(COINS)
    await update.message.reply_text(
        f"‚úÖ <b>–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!</b>\n\n"
        f"üïê –í—Ä–µ–º—è: {now}\n"
        f"üìä –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –∞–∫—Ç–∏–≤–æ–≤: {monitored}\n"
        f"üíæ –í –∫—ç—à–µ —Ü–µ–Ω: {len(last_prices)}",
        parse_mode='HTML'
    )

async def cmd_portfolio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Ä—Ç—Ñ–µ–ª—å–Ω—ã–µ –∞–∫—Ç–∏–≤—ã (–±–µ–∑ SP500)"""
    try:
        await update.message.reply_text("üîÑ –ü–æ–ª—É—á–∞—é —Ü–µ–Ω—ã –ø–æ—Ä—Ç—Ñ–µ–ª—è...")
        
        async with aiohttp.ClientSession() as session:
            yf = await get_yahoo_prices(session)
            crypto = await get_crypto_prices(session)

        lines = ["üíº <b>–ü–æ—Ä—Ç—Ñ–µ–ª—å:</b>\n"]
        
        # –¢–æ–ª—å–∫–æ VWCE –∏ GOLD
        lines.append("<b>üìä ETF:</b>")
        for key in ["VWCE", "GOLD"]:
            price, currency = yf.get(key, (None, None))
            if price:
                name = "VWCE" if key == "VWCE" else "X IE Physical Gold ETC EUR"
                lines.append(f"‚Ä¢ {name}: {price:.2f} {currency or ''}")
            else:
                lines.append(f"‚Ä¢ {key}: –Ω/–¥")
        
        # –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        lines.append("\n<b>‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:</b>")
        for sym in ["BTC", "ETH", "SOL", "AVAX", "DOGE", "LINK"]:
            data = crypto.get(sym, {})
            price = data.get("usd")
            chg = data.get("change_24h")
            if price:
                if isinstance(chg, (int, float)) and not math.isnan(chg):
                    emoji = "üü¢" if chg >= 0 else "üî¥"
                    lines.append(f"{emoji} {sym}: ${price:,.2f} ({chg:+.2f}%)")
                else:
                    lines.append(f"‚Ä¢ {sym}: ${price:,.2f}")
            else:
                lines.append(f"‚Ä¢ {sym}: –Ω/–¥")

        await update.message.reply_text("\n".join(lines), parse_mode='HTML')
    except Exception as e:
        print("‚ùå /portfolio error:", e, traceback.format_exc())
        await update.message.reply_text("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

async def cmd_pingprices(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ü–µ–Ω—ã –≤–∫–ª—é—á–∞—è SP500"""
    try:
        async with aiohttp.ClientSession() as session:
            yf = await get_yahoo_prices(session)
            crypto = await get_crypto_prices(session)

        lines = ["üíπ <b>–í—Å–µ —Ü–µ–Ω—ã:</b>\n"]
        
        lines.append("<b>üìä –§–æ–Ω–¥–æ–≤—ã–π —Ä—ã–Ω–æ–∫:</b>")
        for key in ["SP500", "VWCE", "GOLD"]:
            price, currency = yf.get(key, (None, None))
            if price:
                name = {"SP500": "S&P 500 (SPY)", "VWCE": "VWCE", "GOLD": "Gold (ETF)"}[key]
                lines.append(f"‚Ä¢ {name}: {price:.2f} {currency or ''}")
            else:
                lines.append(f"‚Ä¢ {key}: –Ω/–¥")

        lines.append("\n<b>‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:</b>")
        for sym in ["BTC", "ETH", "SOL", "AVAX", "DOGE", "LINK"]:
            data = crypto.get(sym, {})
            price = data.get("usd")
            chg = data.get("change_24h")
            if price:
                if isinstance(chg, (int, float)) and not math.isnan(chg):
                    lines.append(f"‚Ä¢ {sym}: ${price:,.2f} ({chg:+.2f}%)")
                else:
                    lines.append(f"‚Ä¢ {sym}: ${price:,.2f}")
            else:
                lines.append(f"‚Ä¢ {sym}: –Ω/–¥")

        await update.message.reply_text("\n".join(lines), parse_mode='HTML')
    except Exception as e:
        print("‚ùå /pingprices error:", e, traceback.format_exc())
        await update.message.reply_text("‚ö† –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

async def cmd_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤"""
    message = (
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤:</b>\n\n"
        f"<b>–§–æ–Ω–¥–æ–≤—ã–π —Ä—ã–Ω–æ–∫:</b> ¬±{THRESHOLDS['stocks']}%\n"
        f"<b>–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:</b> ¬±{THRESHOLDS['crypto']}%\n\n"
        "<b>üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</b>\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω: –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç\n"
        "‚Ä¢ –£—Ç—Ä–µ–Ω–Ω–∏–π –æ—Ç—á—ë—Ç: 11:00 (–†–∏–≥–∞)\n"
        "‚Ä¢ –ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç: –í—Å 19:00 (–†–∏–≥–∞)\n\n"
        f"üíæ –í –∫—ç—à–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è: {len(last_prices)} —Ü–µ–Ω"
    )
    await update.message.reply_text(message, parse_mode='HTML')

async def cmd_setalert(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä–æ–≥–∏ –∞–ª–µ—Ä—Ç–æ–≤"""
    if not context.args or len(context.args) != 2:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/setalert [stocks|crypto] [–ø—Ä–æ—Ü–µ–Ω—Ç]</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "<code>/setalert stocks 2</code> ‚Äî –∞–ª–µ—Ä—Ç—ã –¥–ª—è –∞–∫—Ü–∏–π –ø—Ä–∏ ¬±2%\n"
            "<code>/setalert crypto 5</code> ‚Äî –∞–ª–µ—Ä—Ç—ã –¥–ª—è –∫—Ä–∏–ø—Ç—ã –ø—Ä–∏ ¬±5%",
            parse_mode='HTML'
        )
        return
    
    asset_type = context.args[0].lower()
    try:
        threshold = float(context.args[1])
        if threshold <= 0:
            raise ValueError()
    except ValueError:
        await update.message.reply_text("‚ùå –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        return
    
    if asset_type not in ["stocks", "crypto"]:
        await update.message.reply_text("‚ùå –¢–∏–ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'stocks' –∏–ª–∏ 'crypto'")
        return
    
    THRESHOLDS[asset_type] = threshold
    name = "–∞–∫—Ü–∏–π/ETF" if asset_type == "stocks" else "–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"
    await update.message.reply_text(
        f"‚úÖ –ü–æ—Ä–æ–≥ –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è {name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ¬±{threshold}%",
        parse_mode='HTML'
    )

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ä–æ–±–Ω–∞—è –ø–æ–º–æ—â—å"""
    message = (
        "üìñ <b>–ü–æ–º–æ—â—å –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:</b>\n\n"
        "<b>/portfolio</b> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å (VWCE, Gold, –∫—Ä–∏–ø—Ç–∞)\n"
        "<b>/pingprices</b> ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ü–µ–Ω—ã (+ SP500)\n"
        "<b>/alerts</b> ‚Äî —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\n"
        "<b>/setalert</b> ‚Äî –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä–æ–≥–∏ –∞–ª–µ—Ä—Ç–æ–≤\n"
        "<b>/status</b> ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞\n"
        "<b>/help</b> ‚Äî —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n\n"
        "<b>üîî –ê–≤—Ç–æ–º–∞—Ç–∏–∫–∞:</b>\n"
        "–ë–æ—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ü–µ–Ω—ã –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–ª–µ—Ä—Ç—ã, "
        "–µ—Å–ª–∏ —Ü–µ–Ω–∞ –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –±–æ–ª—å—à–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –ø–æ—Ä–æ–≥–∞.\n\n"
        "–ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 11:00 –ø–æ –†–∏–≥–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç —É—Ç—Ä–µ–Ω–Ω–∏–π –æ—Ç—á—ë—Ç, "
        "–∞ –ø–æ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è–º –≤ 19:00 ‚Äî –Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç."
    )
    await update.message.reply_text(message, parse_mode='HTML')

async def echo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–Ø —Ç–µ–±—è —Å–ª—ã—à—É üëÇ")

async def on_error(update: object, context: ContextTypes.DEFAULT_TYPE):
    print("‚ùå Global error handler:", context.error, traceback.format_exc())

def main():
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º Application.builder() –≤–º–µ—Å—Ç–æ ApplicationBuilder()
    app = Application.builder().token(TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("status", cmd_status))
    app.add_handler(CommandHandler("portfolio", cmd_portfolio))
    app.add_handler(CommandHandler("pingprices", cmd_pingprices))
    app.add_handler(CommandHandler("alerts", cmd_alerts))
    app.add_handler(CommandHandler("setalert", cmd_setalert))
    app.add_handler(CommandHandler("help", cmd_help))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))
    app.add_error_handler(on_error)

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞–Ω–∏–π
    job_queue = app.job_queue
    
    if job_queue and CHAT_ID:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç
        job_queue.run_repeating(check_price_alerts, interval=600, first=60)
        
        # –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç –≤ 11:00 –ø–æ –†–∏–≥–µ (Europe/Riga = UTC+2/UTC+3)
        job_queue.run_daily(
            daily_report,
            time=dt_time(hour=11, minute=0),
            days=(0, 1, 2, 3, 4, 5, 6),  # –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
            name='daily_report'
        )
        
        # –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç –≤ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 19:00 –ø–æ –†–∏–≥–µ
        job_queue.run_daily(
            weekly_report,
            time=dt_time(hour=19, minute=0),
            days=(6,),  # –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ = 6
            name='weekly_report'
        )
        
        print("üöÄ Bot is running with monitoring enabled.")
        print("üìä Alert checks: every 10 minutes")
        print("üåÖ Daily report: 11:00 Riga time")
        print("üìÜ Weekly report: Sunday 19:00 Riga time")
    else:
        print("üöÄ Bot is running (monitoring disabled - CHAT_ID not set).")
    
    app.run_polling()

if __name__ == "__main__":
    main()
