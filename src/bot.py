
import os
import csv
import requests
from math import isnan
from datetime import time, datetime, timezone
from zoneinfo import ZoneInfo

from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    MessageHandler,
    CommandHandler,
    ContextTypes,
    filters,
    JobQueue,
)

# ----------------- –ù–ê–°–¢–†–û–ô–ö–ò -----------------
ALLOWED_USER = 235538565  # —Ç–≤–æ–π chat_id (—Ç–æ–ª—å–∫–æ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –æ—Ç–≤–µ—Ç—ã –∏ –∞–ª–µ—Ä—Ç—ã)
TOKEN = os.getenv("BOT_TOKEN")
if TOKEN is None:
    raise RuntimeError("‚ö† BOT_TOKEN is not set in environment!")

# –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
CRYPTO_ALERT_MOVE = 0.04   # ¬±4% –¥–ª—è –∫—Ä–∏–ø—Ç—ã
ASSET_ALERT_MOVE  = 0.01   # ¬±1% –¥–ª—è —Ñ–æ–Ω–¥–æ–≤/–∑–æ–ª–æ—Ç–∞

# –¢–∞–π–º–∑–æ–Ω–∞ –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
RIGA_TZ = ZoneInfo("Europe/Riga")
DAILY_TIME = time(11, 0, tzinfo=RIGA_TZ)      # –∫–∞–∂–¥—ã–π –¥–µ–Ω—å 11:00 –ø–æ –†–∏–≥–µ
WEEKLY_TIME = time(19, 0, tzinfo=RIGA_TZ)     # –∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 19:00 –ø–æ –†–∏–≥–µ
WEEKLY_DAY = 6                                 # Sunday (0=Mon ... 6=Sun)

# –ö—Ä–∏–ø—Ç–∞ (CoinGecko ids)
CRYPTO_IDS = {
    "BTC":  "bitcoin",
    "ETH":  "ethereum",
    "SOL":  "solana",
    "AVAX": "avalanche-2",
    "DOGE": "dogecoin",
    "LINK": "chainlink",
}

# –§–æ–Ω–¥—ã/–∑–æ–ª–æ—Ç–æ (stooq —Ç–∏–∫–µ—Ä—ã —Å –∑–∞–ø–∞—Å–Ω—ã–º–∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏)
ASSET_TICKERS = {
    # –ø—Ä–æ–∫—Å–∏ –Ω–∞ S&P500
    "S&P 500 (SPY)": ["spy.us", "^spx.us"],
    # –≥–ª–æ–±–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤ –µ–≤—Ä–æ
    "VWCE": ["vwce.de", "vwrl.us"],
    # –∑–æ–ª–æ—Ç–æ (–±–µ—Ä—ë–º –≤ $/oz; –µ—Å–ª–∏ –Ω–∞–π–¥—ë–º —Ö–æ—Ä–æ—à–∏–π EUR-—Ç–∏–∫–µ—Ä ‚Äî –¥–æ–±–∞–≤–∏–º –≤–æ –≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç)
    "GOLD (XAU/USD)": ["xauusd.us", "xauusd", "gold.us"],
}

# –•—Ä–∞–Ω–∏–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ü–µ–Ω—ã –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è % –¥–≤–∏–∂–µ–Ω–∏—è —Å –ü–û–°–õ–ï–î–ù–ï–ô –ø—Ä–æ–≤–µ—Ä–∫–∏
last_crypto_prices: dict[str, float] = {}
last_asset_prices: dict[str, float] = {}

# ----------------- –£–¢–ò–õ–´ -----------------
def pct_change(prev: float | None, new: float | None) -> float | None:
    if prev is None or new is None:
        return None
    if prev == 0 or isnan(prev) or isnan(new):
        return None
    return (new - prev) / prev

def fetch_stooq_close(ticker: str) -> float | None:
    """
    –ë–µ—Ä—ë–º Close —Å stooq CSV.
    """
    url = f"https://stooq.com/q/l/?s={ticker}&f=sd2t2ohlcv&h&e=csv"
    try:
        resp = requests.get(url, timeout=6)
        resp.raise_for_status()
        lines = resp.text.strip().splitlines()
        reader = csv.DictReader(lines)
        row = next(reader, None)
        if not row:
            return None
        close = row.get("Close")
        if not close or close == "N/A":
            return None
        return float(close)
    except Exception as e:
        print(f"[stooq] {ticker} failed: {e}")
        return None

def fetch_asset_price(name: str) -> tuple[str, float | None]:
    """
    –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–∏–∫–µ—Ä–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π —É—Å–ø–µ—à–Ω—ã–π.
    """
    for t in ASSET_TICKERS[name]:
        price = fetch_stooq_close(t)
        if price is not None:
            return (t, price)
    return (ASSET_TICKERS[name][0], None)

def fetch_coingecko_prices(ids: list[str]) -> dict[str, float | None]:
    """
    CoinGecko simple price (–±–µ–∑ –∫–ª—é—á–∞). –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç {id: price_usd}.
    """
    joined = ",".join(ids)
    url = f"https://api.coingecko.com/api/v3/simple/price?ids={joined}&vs_currencies=usd"
    try:
        r = requests.get(url, timeout=8)
        r.raise_for_status()
        data = r.json()
        out: dict[str, float | None] = {}
        for _id in ids:
            out[_id] = float(data.get(_id, {}).get("usd")) if data.get(_id) else None
        return out
    except Exception as e:
        print(f"[coingecko] failed: {e}")
        return {i: None for i in ids}

def fmt_price(v: float | None, suffix="") -> str:
    return f"{v:.4g}{suffix}" if isinstance(v, (float, int)) else "‚Äî"

def sign_pct(x: float) -> str:
    return f"{x*100:+.2f}%"

def now_utc_str() -> str:
    return datetime.now(timezone.utc).strftime("%Y-%m-%d %H:%M UTC")

# ----------------- –°–û–û–ë–©–ï–ù–ò–Ø -----------------
def build_prices_snapshot() -> str:
    # –ö—Ä–∏–ø—Ç–∞
    cg_ids = list(CRYPTO_IDS.values())
    cg_map = fetch_coingecko_prices(cg_ids)
    id_to_ticker = {v: k for k, v in CRYPTO_IDS.items()}

    lines = [f"‚è∞ {now_utc_str()}", "üíπ –¶–µ–Ω—ã –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å:"]
    for cid, price in cg_map.items():
        lines.append(f"‚Ä¢ {id_to_ticker[cid]}: {fmt_price(price, ' $')}")

    # –§–æ–Ω–¥—ã/–∑–æ–ª–æ—Ç–æ
    for name in ASSET_TICKERS:
        used_ticker, price = fetch_asset_price(name)
        suffix = " $"
        if "VWCE" in name:
            suffix = " ‚Ç¨"  # —ç—Ç–æ –æ—Ä–∏–µ–Ω—Ç–∏—Ä; stooq –æ—Ç–¥–∞—ë—Ç –≤ –≤–∞–ª—é—Ç–µ –±—É–º–∞–≥–∏ (—É VWCE –µ–≤—Ä–æ)
        lines.append(f"‚Ä¢ {name}: {fmt_price(price, suffix)} (via {used_ticker})")

    return "\n".join(lines)

def build_weekly_calendar_text() -> str:
    # –ë–∞–∑–æ–≤—ã–π –Ω–∞–±—Ä–æ—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Ä–∏—Å–∫–æ–≤ –Ω–µ–¥–µ–ª–∏ (–±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö API).
    items = [
        "üìÖ –§–†–°/—Å—Ç–∞–≤–∫–∞ –°–®–ê ‚Äî —Ç–æ–Ω –≤–ª–∏—è–µ—Ç –Ω–∞ –∞–∫—Ü–∏–∏ –°–®–ê –∏ VWCE",
        "üìÖ CPI/–∏–Ω—Ñ–ª—è—Ü–∏—è –°–®–ê ‚Äî –≤—ã—Å–æ–∫–∞—è –∏–Ω—Ñ–ª—è—Ü–∏—è ‚Üí –¥–∞–≤–ª–µ–Ω–∏–µ –Ω–∞ –∞–∫—Ü–∏–∏, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –∑–æ–ª–æ—Ç—É",
        "üìÖ –û—Ç—á—ë—Ç—ã –∫—Ä—É–ø–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π –°–®–ê ‚Äî –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –∏–Ω–¥–µ–∫—Å–∞",
        "üåè –°–®–ê‚Äî–ö–∏—Ç–∞–π ‚Äî —Ä–∏—Ç–æ—Ä–∏–∫–∞/–≤—Å—Ç—Ä–µ—á–∏ ‚Üí —Ç–µ—Ö–∏/–ø–æ–ª—É–ø—Ä–æ–≤–æ–¥–Ω–∏–∫–∏",
        "üí¨ –°–ø–∏—á–∏ —Ü–µ–Ω—Ç—Ä–æ–±–∞–Ω–∫–æ–≤ (–ü–∞—É—ç–ª–ª/–õ–∞–≥–∞—Ä–¥) ‚Äî —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è —Ä–∏—Å–∫–∞",
    ]
    out = ["üóì –ö–∞–ª–µ–Ω–¥–∞—Ä—å —Ä–∏—Å–∫–∞ –Ω–∞ –Ω–µ–¥–µ–ª—é (–Ω–∞–±—Ä–æ—Å–æ–∫):"]
    out += [f"‚Ä¢ {x}" for x in items]
    out.append("\nP.S. –ú–æ–≥—É —Ä–∞—Å—à–∏—Ä–∏—Ç—å —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞—Ç–∞–º–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É.")
    return "\n".join(out)

# ----------------- –ë–û–¢-–•–ï–ù–î–õ–ï–†–´ -----------------
async def is_allowed(update: Update) -> bool:
    chat_id = update.effective_chat.id
    if chat_id != ALLOWED_USER:
        print(f"‚õî Unauthorized access attempt from chat_id={chat_id}")
        return False
    return True

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_allowed(update):
        return
    await update.message.reply_text(
        "‚úÖ –Ø –∑–¥–µ—Å—å. –ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /status ‚Äî —Å–≤–æ–¥–∫–∞ –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—é –∏ —Ä–∏—Å–∫–∞–º\n"
        "‚Ä¢ /pingprices ‚Äî –∂–∏–≤—ã–µ —Ü–µ–Ω—ã (–∫—Ä–∏–ø—Ç–∞ + —Ñ–æ–Ω–¥—ã)\n"
        "\n–ê–ª–µ—Ä—Ç—ã:\n"
        "‚Ä¢ –ö—Ä–∏–ø—Ç–∞: ¬±4%\n"
        "‚Ä¢ VWCE/SPY/Gold: ¬±1%\n"
        "\n–ê–≤—Ç–æ-–¥–∞–π–¥–∂–µ—Å—Ç:\n"
        "‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ 11:00 (–†–∏–≥–∞) ‚Äî —Ü–µ–Ω—ã\n"
        "‚Ä¢ –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ 19:00 ‚Äî –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–µ–¥–µ–ª–∏\n"
        "–¢–æ–ª—å–∫–æ –¥–ª—è —Ç–µ–±—è üîí"
    )

async def status_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_allowed(update):
        return
    portfolio = [
        "üì¶ –ò–¥–µ—è –ø–æ—Ä—Ç—Ñ–µ–ª—è:",
        "‚Ä¢ S&P 500 (—á–µ—Ä–µ–∑ SPY) ‚Äî —Ä–æ—Å—Ç",
        "‚Ä¢ VWCE (–≤–µ—Å—å –º–∏—Ä) ‚Äî –¥–∏–≤–µ—Ä—Å–∏—Ñ–∏–∫–∞—Ü–∏—è",
        "‚Ä¢ Gold ‚Äî –∑–∞—â–∏—Ç–∞",
        "",
        "–õ–æ–≥–∏–∫–∞: –∞–∫—Ü–∏–∏ = —Ä–æ—Å—Ç, –∑–æ–ª–æ—Ç–æ = –∑–∞—â–∏—Ç–∞. –ë–∞–ª–∞–Ω—Å–∏—Ä—É–µ—à—å, –∞ –Ω–µ –≥–∞–¥–∞–µ—à—å.",
    ]
    risks = [
        "–†–∏—Å–∫–∏ –±–ª–∏–∂–∞–π—à–µ–≥–æ –ø–ª–∞–Ω–∞:",
        "‚Ä¢ –§–†–°/—Å—Ç–∞–≤–∫–∞, CPI –°–®–ê",
        "‚Ä¢ –†–∏—Ç–æ—Ä–∏–∫–∞ –°–®–ê‚Äì–ö–∏—Ç–∞–π",
        "‚Ä¢ –û—Ç—á—ë—Ç—ã –º–µ–π–¥–∂–æ—Ä–æ–≤ –°–®–ê",
    ]
    msg = f"‚è∞ {now_utc_str()}\n" + "\n".join(portfolio) + "\n\n" + "\n".join(risks)
    await update.message.reply_text(msg)

async def pingprices_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_allowed(update):
        return
    await update.message.reply_text(build_prices_snapshot())

async def echo_chat_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not await is_allowed(update):
        return
    await update.message.reply_text(f"–¢–≤–æ–π chat_id: {ALLOWED_USER}")

# ----------------- JOBS: –ü–û–í–¢–û–†–Ø–Æ–©–ò–ï–°–Ø –ü–†–û–í–ï–†–ö–ò -----------------
def collect_current_prices():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
      crypto_prices: {ticker: price_usd}
      asset_prices:  {name: price}
    """
    # –∫—Ä–∏–ø—Ç–∞
    crypto_prices: dict[str, float | None] = {}
    cg_map = fetch_coingecko_prices(list(CRYPTO_IDS.values()))
    for sym, cid in CRYPTO_IDS.items():
        crypto_prices[sym] = cg_map.get(cid)

    # —Ñ–æ–Ω–¥—ã/–∑–æ–ª–æ—Ç–æ
    asset_prices: dict[str, float | None] = {}
    for name in ASSET_TICKERS:
        _, price = fetch_asset_price(name)
        asset_prices[name] = price

    return crypto_prices, asset_prices

async def periodic_check(context: ContextTypes.DEFAULT_TYPE):
    """
    –ö–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç: —Å—á–∏—Ç–∞–µ–º % –∏–∑–º–µ–Ω–µ–Ω–∏—è vs –ø—Ä–æ—à–ª—ã–π —á–µ–∫,
    —à–ª—ë–º –∞–ª–µ—Ä—Ç—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ø–æ—Ä–æ–≥.
    """
    chat_id = ALLOWED_USER
    crypto_curr, asset_curr = collect_current_prices()

    # –ö—Ä–∏–ø—Ç–∞ (¬±4%)
    for sym, newp in crypto_curr.items():
        prevp = last_crypto_prices.get(sym)
        chg = pct_change(prevp, newp)
        if chg is not None and abs(chg) >= CRYPTO_ALERT_MOVE:
            sign = "üî∫" if chg > 0 else "üîª"
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"{sign} {sym} {sign_pct(chg)} (—Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏)\n–¢–µ–∫—É—â–∞—è: {fmt_price(newp, ' $')}"
            )
        # –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–∑—É (–ø–æ—Å–ª–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
        if newp is not None:
            last_crypto_prices[sym] = newp

    # –§–æ–Ω–¥—ã/–∑–æ–ª–æ—Ç–æ (¬±1%)
    for name, newp in asset_curr.items():
        prevp = last_asset_prices.get(name)
        chg = pct_change(prevp, newp)
        if chg is not None and abs(chg) >= ASSET_ALERT_MOVE:
            sign = "üî∫" if chg > 0 else "üîª"
            suffix = " ‚Ç¨" if "VWCE" in name else " $"
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"{sign} {name} {sign_pct(chg)} (—Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏)\n–¢–µ–∫—É—â–∞—è: {fmt_price(newp, suffix)}"
            )
        if newp is not None:
            last_asset_prices[name] = newp

async def daily_digest(context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=ALLOWED_USER, text="üì¨ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç\n" + build_prices_snapshot())

async def weekly_calendar(context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=ALLOWED_USER, text=build_weekly_calendar_text())

# ----------------- MAIN -----------------
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("status", status_cmd))
    app.add_handler(CommandHandler("pingprices", pingprices_cmd))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo_chat_id))

    # Jobs
    jq: JobQueue = app.job_queue
    # –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ ¬±4%/¬±1%
    jq.run_repeating(periodic_check, interval=600, first=10, name="price_watch")

    # –µ–∂–µ–¥–Ω–µ–≤–Ω–æ 11:00 –ø–æ –†–∏–≥–µ ‚Äî –¥–∞–π–¥–∂–µ—Å—Ç —Ü–µ–Ω
    jq.run_daily(daily_digest, time=DAILY_TIME, name="daily_digest")

    # –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ –≤—Å 19:00 –ø–æ –†–∏–≥–µ ‚Äî –∫–∞–ª–µ–Ω–¥–∞—Ä—å –Ω–µ–¥–µ–ª–∏
    jq.run_daily(weekly_calendar, time=WEEKLY_TIME, days=(WEEKLY_DAY,), name="weekly_calendar")

    print("üöÄ Bot is running. Alerts: crypto ¬±4%, assets ¬±1%.")
    app.run_polling(drop_pending_updates=True)

if __name__ == "__main__":
    main()
