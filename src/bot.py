import os
import math
import json
import asyncio
import traceback
import aiohttp
from typing import Dict, Any, Optional, Tuple, List
from datetime import time as dt_time

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# === ENV ===
TOKEN = os.getenv("BOT_TOKEN")
CHAT_ID = os.getenv("CHAT_ID")
if not TOKEN:
    raise RuntimeError("‚ö† BOT_TOKEN is not set in environment!")
if not CHAT_ID:
    print("‚ö† CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω - –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –±—É–¥—É—Ç –æ—Ç–∫–ª—é—á–µ–Ω—ã")

# === CONFIG ===
HEADERS = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36",
    "Accept": "application/json",
    "Accept-Language": "en-US,en;q=0.9",
}
TIMEOUT = aiohttp.ClientTimeout(total=15)

# –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è
AVAILABLE_TICKERS = {
    "VWCE.DE": {"name": "VWCE", "type": "stock"},
    "4GLD.DE": {"name": "4GLD (Gold ETC)", "type": "stock"},
    "DE000A2T5DZ1.SG": {"name": "X IE Physical Gold ETC", "type": "stock"},
    "SPY": {"name": "S&P 500 (SPY)", "type": "stock"},
}

# –ö—Ä–∏–ø—Ç–∞: CoinGecko id + CoinPaprika id
CRYPTO_IDS = {
    "BTC": {"coingecko": "bitcoin", "paprika": "btc-bitcoin", "name": "Bitcoin"},
    "ETH": {"coingecko": "ethereum", "paprika": "eth-ethereum", "name": "Ethereum"},
    "SOL": {"coingecko": "solana", "paprika": "sol-solana", "name": "Solana"},
    "AVAX": {"coingecko": "avalanche-2", "paprika": "avax-avalanche", "name": "Avalanche"},
    "DOGE": {"coingecko": "dogecoin", "paprika": "doge-dogecoin", "name": "Dogecoin"},
    "LINK": {"coingecko": "chainlink", "paprika": "link-chainlink", "name": "Chainlink"},
}

# –ü–æ—Ä–æ–≥–∏ –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤
THRESHOLDS = {
    "stocks": 1.0,
    "crypto": 4.0,
}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π (–≤ –ø–∞–º—è—Ç–∏, –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ñ–∞–π–ª/–ë–î)
user_portfolios: Dict[int, Dict[str, float]] = {}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ü–µ–Ω –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤
last_prices: Dict[str, float] = {}

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu():
    keyboard = [
        [KeyboardButton("üíº –ú–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å"), KeyboardButton("üíπ –í—Å–µ —Ü–µ–Ω—ã")],
        [KeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤"), KeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤")],
        [KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤"), KeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å")],
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# ----------------- HTTP helpers -----------------
async def get_json(session: aiohttp.ClientSession, url: str, params=None) -> Optional[Dict[str, Any]]:
    try:
        async with session.get(url, params=params, headers=HEADERS, timeout=TIMEOUT) as r:
            if r.status != 200:
                print(f"‚ö† {url} -> HTTP {r.status}")
                return None
            data = await r.json()
            return data
    except Exception as e:
        print(f"‚ùå get_json({url}) error: {e}")
        return None

# ----------------- PRICES: Yahoo Finance -----------------
async def get_yahoo_price(session: aiohttp.ClientSession, ticker: str) -> Optional[Tuple[float, str]]:
    """–ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –æ–¥–Ω–æ–≥–æ —Ç–∏–∫–µ—Ä–∞"""
    try:
        url = f"https://query2.finance.yahoo.com/v8/finance/chart/{ticker}"
        params = {"interval": "1d", "range": "1d"}
        data = await get_json(session, url, params)
        
        if data:
            result = data.get("chart", {}).get("result", [{}])[0]
            meta = result.get("meta", {})
            price = meta.get("regularMarketPrice")
            cur = meta.get("currency", "USD")
            if price:
                return (float(price), cur)
    except Exception as e:
        print(f"‚ùå Yahoo {ticker} error: {e}")
    return None

# ----------------- PRICES: CoinPaprika -----------------
async def get_crypto_price(session: aiohttp.ClientSession, symbol: str) -> Optional[Dict[str, float]]:
    """–ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã —á–µ—Ä–µ–∑ CoinPaprika"""
    try:
        crypto_info = CRYPTO_IDS.get(symbol)
        if not crypto_info:
            return None
        
        paprika_id = crypto_info["paprika"]
        url = f"https://api.coinpaprika.com/v1/tickers/{paprika_id}"
        data = await get_json(session, url, None)
        
        if data:
            quotes = data.get("quotes", {}).get("USD", {})
            price = quotes.get("price")
            change_24h = quotes.get("percent_change_24h")
            if price:
                return {
                    "usd": float(price),
                    "change_24h": float(change_24h) if change_24h else None
                }
    except Exception as e:
        print(f"‚ùå CoinPaprika {symbol} error: {e}")
    return None

# ----------------- Portfolio Management -----------------
def get_user_portfolio(user_id: int) -> Dict[str, float]:
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_portfolios:
        # –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å
        user_portfolios[user_id] = {
            "VWCE.DE": 0,
            "DE000A2T5DZ1.SG": 0,
            "BTC": 0,
            "ETH": 0,
            "SOL": 0,
        }
    return user_portfolios[user_id]

def save_portfolio(user_id: int, portfolio: Dict[str, float]):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å"""
    user_portfolios[user_id] = portfolio

# ----------------- MONITORING LOGIC -----------------
async def check_price_alerts(context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç"""
    if not CHAT_ID:
        print("‚ö†Ô∏è CHAT_ID not set, skipping alerts")
        return
    
    print("üîî Running price alerts check...")
    
    try:
        async with aiohttp.ClientSession() as session:
            alerts = []
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ü–∏–∏/ETF
            print("üìä Checking stocks/ETF...")
            for ticker in AVAILABLE_TICKERS:
                price_data = await get_yahoo_price(session, ticker)
                if not price_data:
                    continue
                
                price, currency = price_data
                cache_key = f"stock_{ticker}"
                
                if cache_key in last_prices:
                    old_price = last_prices[cache_key]
                    change_pct = ((price - old_price) / old_price) * 100
                    print(f"  {ticker}: {old_price:.2f} -> {price:.2f} ({change_pct:+.2f}%)")
                    
                    if abs(change_pct) >= THRESHOLDS["stocks"]:
                        name = AVAILABLE_TICKERS[ticker]["name"]
                        emoji = "üìà" if change_pct > 0 else "üìâ"
                        alerts.append(
                            f"{emoji} <b>{name}</b>: {change_pct:+.2f}%\n"
                            f"–¶–µ–Ω–∞: {price:.2f} {currency}"
                        )
                        print(f"  üö® ALERT! {name} changed by {change_pct:+.2f}%")
                else:
                    print(f"  {ticker}: First check, storing price {price:.2f}")
                
                last_prices[cache_key] = price
                await asyncio.sleep(0.3)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
            print("‚Çø Checking crypto...")
            for symbol in CRYPTO_IDS:
                crypto_data = await get_crypto_price(session, symbol)
                if not crypto_data:
                    continue
                
                price = crypto_data["usd"]
                cache_key = f"crypto_{symbol}"
                
                if cache_key in last_prices:
                    old_price = last_prices[cache_key]
                    change_pct = ((price - old_price) / old_price) * 100
                    print(f"  {symbol}: ${old_price:,.2f} -> ${price:,.2f} ({change_pct:+.2f}%)")
                    
                    if abs(change_pct) >= THRESHOLDS["crypto"]:
                        emoji = "üöÄ" if change_pct > 0 else "‚ö†Ô∏è"
                        alerts.append(
                            f"{emoji} <b>{symbol}</b>: {change_pct:+.2f}%\n"
                            f"–¶–µ–Ω–∞: ${price:,.2f}"
                        )
                        print(f"  üö® ALERT! {symbol} changed by {change_pct:+.2f}%")
                else:
                    print(f"  {symbol}: First check, storing price ${price:,.2f}")
                
                last_prices[cache_key] = price
                await asyncio.sleep(0.2)
            
            print(f"‚úÖ Alert check complete. Cached prices: {len(last_prices)}, Alerts: {len(alerts)}")
            
            if alerts:
                message = "üîî <b>–¶–µ–Ω–æ–≤—ã–µ –∞–ª–µ—Ä—Ç—ã!</b>\n\n" + "\n\n".join(alerts)
                await context.bot.send_message(chat_id=CHAT_ID, text=message, parse_mode='HTML')
                print("üì§ Alerts sent to user")
    
    except Exception as e:
        print(f"‚ùå check_price_alerts error: {e}")
        traceback.print_exc()

async def daily_report(context: ContextTypes.DEFAULT_TYPE):
    """–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á—ë—Ç"""
    if not CHAT_ID:
        return
    
    try:
        from datetime import datetime
        now = datetime.now().strftime("%d.%m.%Y")
        
        lines = [f"üåÖ <b>–£—Ç—Ä–µ–Ω–Ω–∏–π –æ—Ç—á—ë—Ç ({now})</b>\n"]
        
        async with aiohttp.ClientSession() as session:
            lines.append("<b>üìä –§–æ–Ω–¥–æ–≤—ã–π —Ä—ã–Ω–æ–∫:</b>")
            for ticker, info in AVAILABLE_TICKERS.items():
                price_data = await get_yahoo_price(session, ticker)
                if price_data:
                    price, cur = price_data
                    lines.append(f"‚Ä¢ {info['name']}: {price:.2f} {cur}")
                await asyncio.sleep(0.3)
            
            lines.append("\n<b>‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:</b>")
            for symbol, info in CRYPTO_IDS.items():
                crypto_data = await get_crypto_price(session, symbol)
                if crypto_data:
                    price = crypto_data["usd"]
                    chg = crypto_data.get("change_24h")
                    if chg:
                        lines.append(f"‚Ä¢ {symbol}: ${price:,.2f} ({chg:+.2f}%)")
                    else:
                        lines.append(f"‚Ä¢ {symbol}: ${price:,.2f}")
                await asyncio.sleep(0.2)
        
        await context.bot.send_message(chat_id=CHAT_ID, text="\n".join(lines), parse_mode='HTML')
    
    except Exception as e:
        print(f"‚ùå daily_report error: {e}")

async def weekly_report(context: ContextTypes.DEFAULT_TYPE):
    """–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç"""
    await daily_report(context)

# ----------------- BOT handlers -----------------
async def cmd_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã <b>–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è</b>\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è üëá",
        parse_mode='HTML',
        reply_markup=get_main_menu()
    )

async def cmd_portfolio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = update.effective_user.id
    portfolio = get_user_portfolio(user_id)
    
    if not portfolio or all(v == 0 for v in portfolio.values()):
        await update.message.reply_text(
            "üíº –í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É <b>‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤</b> –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–æ–≤.",
            parse_mode='HTML'
        )
        return
    
    try:
        lines = ["üíº <b>–í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å:</b>\n"]
        total_value_usd = 0
        
        async with aiohttp.ClientSession() as session:
            # –ê–∫—Ü–∏–∏/ETF
            stock_items = [(k, v) for k, v in portfolio.items() if k in AVAILABLE_TICKERS]
            if stock_items:
                lines.append("<b>üìä –ê–∫—Ü–∏–∏/ETF:</b>")
                for ticker, quantity in stock_items:
                    if quantity == 0:
                        continue
                    price_data = await get_yahoo_price(session, ticker)
                    if price_data:
                        price, cur = price_data
                        value = price * quantity
                        lines.append(
                            f"‚Ä¢ {AVAILABLE_TICKERS[ticker]['name']}: {quantity:.2f} —à—Ç\n"
                            f"  –¶–µ–Ω–∞: {price:.2f} {cur} | –°—É–º–º–∞: {value:.2f} {cur}"
                        )
                        if cur == "USD":
                            total_value_usd += value
                        elif cur == "EUR":
                            total_value_usd += value * 1.1  # –ü—Ä–∏–º–µ—Ä–Ω—ã–π –∫—É—Ä—Å
                    await asyncio.sleep(0.3)
            
            # –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
            crypto_items = [(k, v) for k, v in portfolio.items() if k in CRYPTO_IDS]
            if crypto_items:
                lines.append("\n<b>‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:</b>")
                for symbol, quantity in crypto_items:
                    if quantity == 0:
                        continue
                    crypto_data = await get_crypto_price(session, symbol)
                    if crypto_data:
                        price = crypto_data["usd"]
                        chg = crypto_data.get("change_24h")
                        value = price * quantity
                        total_value_usd += value
                        
                        chg_str = f" ({chg:+.2f}%)" if chg else ""
                        lines.append(
                            f"‚Ä¢ {symbol}: {quantity:.4f}\n"
                            f"  –¶–µ–Ω–∞: ${price:,.2f}{chg_str} | –°—É–º–º–∞: ${value:,.2f}"
                        )
                    await asyncio.sleep(0.2)
        
        if total_value_usd > 0:
            lines.append(f"\n<b>üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: ~${total_value_usd:,.2f}</b>")
        
        await update.message.reply_text("\n".join(lines), parse_mode='HTML')
    
    except Exception as e:
        print(f"‚ùå portfolio error: {e}")
        traceback.print_exc()
        await update.message.reply_text("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")

async def cmd_all_prices(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ü–µ–Ω—ã"""
    try:
        lines = ["üíπ <b>–í—Å–µ —Ü–µ–Ω—ã:</b>\n"]
        
        async with aiohttp.ClientSession() as session:
            lines.append("<b>üìä –§–æ–Ω–¥–æ–≤—ã–π —Ä—ã–Ω–æ–∫:</b>")
            for ticker, info in AVAILABLE_TICKERS.items():
                price_data = await get_yahoo_price(session, ticker)
                if price_data:
                    price, cur = price_data
                    lines.append(f"‚Ä¢ {info['name']}: {price:.2f} {cur}")
                else:
                    lines.append(f"‚Ä¢ {info['name']}: –Ω/–¥")
                await asyncio.sleep(0.3)
            
            lines.append("\n<b>‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:</b>")
            for symbol, info in CRYPTO_IDS.items():
                crypto_data = await get_crypto_price(session, symbol)
                if crypto_data:
                    price = crypto_data["usd"]
                    chg = crypto_data.get("change_24h")
                    if chg:
                        lines.append(f"‚Ä¢ {symbol}: ${price:,.2f} ({chg:+.2f}%)")
                    else:
                        lines.append(f"‚Ä¢ {symbol}: ${price:,.2f}")
                else:
                    lines.append(f"‚Ä¢ {symbol}: –Ω/–¥")
                await asyncio.sleep(0.2)
        
        await update.message.reply_text("\n".join(lines), parse_mode='HTML')
    
    except Exception as e:
        print(f"‚ùå all_prices error: {e}")
        await update.message.reply_text("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö")

async def cmd_add_asset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å"""
    await update.message.reply_text(
        "‚ûï <b>–î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤</b>\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "<code>/add TICKER –ö–û–õ–ò–ß–ï–°–¢–í–û</code>\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
        "<code>/add VWCE.DE 10</code> - 10 –∞–∫—Ü–∏–π VWCE\n"
        "<code>/add BTC 0.5</code> - 0.5 BTC\n"
        "<code>/add ETH 2</code> - 2 ETH\n\n"
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã:</b>\n"
        "‚Ä¢ VWCE.DE, 4GLD.DE, DE000A2T5DZ1.SG, SPY\n"
        "‚Ä¢ BTC, ETH, SOL, AVAX, DOGE, LINK",
        parse_mode='HTML'
    )

async def cmd_add(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ /add TICKER QUANTITY"""
    if len(context.args) != 2:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/add TICKER –ö–û–õ–ò–ß–ï–°–¢–í–û</code>",
            parse_mode='HTML'
        )
        return
    
    ticker = context.args[0].upper()
    try:
        quantity = float(context.args[1])
        if quantity <= 0:
            raise ValueError()
    except ValueError:
        await update.message.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ç–∏–∫–µ—Ä–∞
    if ticker not in AVAILABLE_TICKERS and ticker not in CRYPTO_IDS:
        await update.message.reply_text(
            f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–∫–µ—Ä: {ticker}\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–∫–µ—Ä—ã: VWCE.DE, 4GLD.DE, DE000A2T5DZ1.SG, SPY, BTC, ETH, SOL, AVAX, DOGE, LINK"
        )
        return
    
    user_id = update.effective_user.id
    portfolio = get_user_portfolio(user_id)
    portfolio[ticker] = portfolio.get(ticker, 0) + quantity
    save_portfolio(user_id, portfolio)
    
    name = AVAILABLE_TICKERS.get(ticker, {}).get("name") or CRYPTO_IDS.get(ticker, {}).get("name") or ticker
    await update.message.reply_text(
        f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: <b>{quantity} {name}</b>\n"
        f"–¢–µ–ø–µ—Ä—å —É –≤–∞—Å: {portfolio[ticker]:.4f}",
        parse_mode='HTML'
    )

async def cmd_remove_asset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤ –∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è"""
    user_id = update.effective_user.id
    portfolio = get_user_portfolio(user_id)
    
    if not portfolio or all(v == 0 for v in portfolio.values()):
        await update.message.reply_text("üíº –í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø—É—Å—Ç!")
        return
    
    assets = [f"‚Ä¢ <code>/remove {k}</code> - {v:.4f}" for k, v in portfolio.items() if v > 0]
    await update.message.reply_text(
        "‚ûñ <b>–£–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤</b>\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
        "<code>/remove TICKER</code>\n\n"
        "<b>–í–∞—à–∏ –∞–∫—Ç–∏–≤—ã:</b>\n" + "\n".join(assets),
        parse_mode='HTML'
    )

async def cmd_remove(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ /remove TICKER"""
    if len(context.args) != 1:
        await update.message.reply_text("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/remove TICKER</code>", parse_mode='HTML')
        return
    
    ticker = context.args[0].upper()
    user_id = update.effective_user.id
    portfolio = get_user_portfolio(user_id)
    
    if ticker not in portfolio or portfolio[ticker] == 0:
        await update.message.reply_text(f"‚ùå {ticker} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –≤–∞—à–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª–µ")
        return
    
    portfolio[ticker] = 0
    save_portfolio(user_id, portfolio)
    await update.message.reply_text(f"‚úÖ {ticker} —É–¥–∞–ª—ë–Ω –∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è")

async def cmd_alerts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤"""
    message = (
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤:</b>\n\n"
        f"<b>–§–æ–Ω–¥–æ–≤—ã–π —Ä—ã–Ω–æ–∫:</b> ¬±{THRESHOLDS['stocks']}%\n"
        f"<b>–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã:</b> ¬±{THRESHOLDS['crypto']}%\n\n"
        "<b>üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ:</b>\n"
        "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞: –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç\n"
        "‚Ä¢ –£—Ç—Ä–µ–Ω–Ω–∏–π –æ—Ç—á—ë—Ç: 11:00 (–†–∏–≥–∞)\n"
        "‚Ä¢ –ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç: –í—Å 19:00 (–†–∏–≥–∞)\n\n"
        f"üíæ –í –∫—ç—à–µ: {len(last_prices)} —Ü–µ–Ω\n\n"
        "–ò–∑–º–µ–Ω–∏—Ç—å: <code>/setalert stocks 2</code>\n"
        "–¢–µ—Å—Ç: <code>/testalert</code>"
    )
    await update.message.reply_text(message, parse_mode='HTML')

async def cmd_test_alert(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–µ—Å—Ç–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–ª–µ—Ä—Ç–æ–≤"""
    await update.message.reply_text("üîÑ –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –∞–ª–µ—Ä—Ç–æ–≤...")
    await check_price_alerts(context)
    await update.message.reply_text(
        f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
        f"üíæ –í –∫—ç—à–µ: {len(last_prices)} —Ü–µ–Ω\n\n"
        f"–°–º–æ—Ç—Ä–∏—Ç–µ –ª–æ–≥–∏ Render –¥–ª—è –¥–µ—Ç–∞–ª–µ–π."
    )

async def cmd_setalert(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä–æ–≥–∏ –∞–ª–µ—Ä—Ç–æ–≤"""
    if not context.args or len(context.args) != 2:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>/setalert [stocks|crypto] [–ø—Ä–æ—Ü–µ–Ω—Ç]</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "<code>/setalert stocks 2</code> ‚Äî –∞–ª–µ—Ä—Ç—ã –¥–ª—è –∞–∫—Ü–∏–π –ø—Ä–∏ ¬±2%\n"
            "<code>/setalert crypto 5</code> ‚Äî –∞–ª–µ—Ä—Ç—ã –¥–ª—è –∫—Ä–∏–ø—Ç—ã –ø—Ä–∏ ¬±5%",
            parse_mode='HTML'
        )
        return
    
    asset_type = context.args[0].lower()
    try:
        threshold = float(context.args[1])
        if threshold <= 0:
            raise ValueError()
    except ValueError:
        await update.message.reply_text("‚ùå –ü—Ä–æ—Ü–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
        return
    
    if asset_type not in ["stocks", "crypto"]:
        await update.message.reply_text("‚ùå –¢–∏–ø –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å 'stocks' –∏–ª–∏ 'crypto'")
        return
    
    THRESHOLDS[asset_type] = threshold
    name = "–∞–∫—Ü–∏–π/ETF" if asset_type == "stocks" else "–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"
    await update.message.reply_text(
        f"‚úÖ –ü–æ—Ä–æ–≥ –∞–ª–µ—Ä—Ç–æ–≤ –¥–ª—è {name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: ¬±{threshold}%",
        parse_mode='HTML'
    )

async def cmd_help(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–º–æ—â—å"""
    message = (
        "‚ÑπÔ∏è <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:</b>\n\n"
        "<b>–ö–Ω–æ–ø–∫–∏ –º–µ–Ω—é:</b>\n"
        "üíº <b>–ú–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å</b> - –ø–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ –∞–∫—Ç–∏–≤—ã\n"
        "üíπ <b>–í—Å–µ —Ü–µ–Ω—ã</b> - –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ—Ç–∏—Ä–æ–≤–∫–∏\n"
        "‚ûï <b>–î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤</b> - –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è\n"
        "‚ûñ <b>–£–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤</b> - —É–±—Ä–∞—Ç—å –∏–∑ –ø–æ—Ä—Ç—Ñ–µ–ª—è\n\n"
        "<b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "<code>/add TICKER –ö–û–õ-–í–û</code> - –¥–æ–±–∞–≤–∏—Ç—å\n"
        "<code>/remove TICKER</code> - —É–¥–∞–ª–∏—Ç—å\n"
        "<code>/setalert stocks 2</code> - –∏–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä–æ–≥–∏"
    )
    await update.message.reply_text(message, parse_mode='HTML')

async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é"""
    text = update.message.text
    
    if text == "üíº –ú–æ–π –ø–æ—Ä—Ç—Ñ–µ–ª—å":
        await cmd_portfolio(update, context)
    elif text == "üíπ –í—Å–µ —Ü–µ–Ω—ã":
        await cmd_all_prices(update, context)
    elif text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∞–∫—Ç–∏–≤":
        await cmd_add_asset(update, context)
    elif text == "‚ûñ –£–¥–∞–ª–∏—Ç—å –∞–∫—Ç–∏–≤":
        await cmd_remove_asset(update, context)
    elif text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤":
        await cmd_alerts(update, context)
    elif text == "‚ÑπÔ∏è –ü–æ–º–æ—â—å":
        await cmd_help(update, context)
    else:
        await update.message.reply_text("–Ø —Ç–µ–±—è —Å–ª—ã—à—É üëÇ")

async def on_error(update: object, context: ContextTypes.DEFAULT_TYPE):
    print("‚ùå Global error:", context.error)
    traceback.print_exc()

def main():
    # –û–±—Ö–æ–¥–Ω–æ–π –ø—É—Ç—å –¥–ª—è python-telegram-bot 20.6 + Python 3.13
    from telegram.ext import ApplicationBuilder
    
    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±–µ–∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è Updater
    builder = ApplicationBuilder()
    builder.token(TOKEN)
    
    # –û—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ updater –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ—à–∏–±–∫–∏
    try:
        app = builder.build()
    except AttributeError:
        # Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –≤–µ—Ä—Å–∏–π
        import telegram.ext._applicationbuilder as ab
        # –ü–∞—Ç—á–∏–º build –º–µ—Ç–æ–¥
        original_build = ab.ApplicationBuilder.build
        def patched_build(self):
            self._updater = None  # –û—Ç–∫–ª—é—á–∞–µ–º updater
            return original_build(self)
        ab.ApplicationBuilder.build = patched_build
        app = builder.build()

    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", cmd_start))
    app.add_handler(CommandHandler("add", cmd_add))
    app.add_handler(CommandHandler("remove", cmd_remove))
    app.add_handler(CommandHandler("setalert", cmd_setalert))
    app.add_handler(CommandHandler("testalert", cmd_test_alert))
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_buttons))
    app.add_error_handler(on_error)

    # –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    job_queue = app.job_queue
    
    if job_queue and CHAT_ID:
        job_queue.run_repeating(check_price_alerts, interval=600, first=60)
        job_queue.run_daily(daily_report, time=dt_time(hour=11, minute=0), days=(0,1,2,3,4,5,6))
        job_queue.run_daily(weekly_report, time=dt_time(hour=19, minute=0), days=(6,))
        print("üöÄ Bot running with monitoring enabled")
    else:
        print("üöÄ Bot running (monitoring disabled)")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º polling –≤—Ä—É—á–Ω—É—é
    print("üîÑ Starting polling...")
    app.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
